Index: app/src/main/java/com/soportereal/invefacon/interfaces/compact/inicio_sesion/InterfazInicioSesionCompact.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.interfaces.compact.inicio_sesion\r\n\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.view.inputmethod.InputMethodManager\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Email\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material.icons.filled.Home\r\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\r\nimport androidx.compose.material.icons.filled.KeyboardArrowUp\r\nimport androidx.compose.material.icons.filled.Lock\r\nimport androidx.compose.material.icons.filled.Visibility\r\nimport androidx.compose.material.icons.filled.VisibilityOff\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExposedDropdownMenuBox\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.OutlinedTextFieldDefaults\r\nimport androidx.compose.material3.Snackbar\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateListOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.geometry.Size\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.SolidColor\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.layout.onGloballyPositioned\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.toSize\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.navigation.NavController\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\nimport com.soportereal.invefacon.R\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasPrincipales\r\nimport com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.cancel\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport java.util.regex.Pattern\r\n\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun IniciarInterfazInicioSesionCompact(\r\n    navController: NavController?,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga\r\n){\r\n\r\n    systemUiController.setStatusBarColor(Color(0xFF244BC0))\r\n    systemUiController.setNavigationBarColor(Color.Black)\r\n    var clienteCorreoEmpresa by remember { mutableStateOf(\"\") }\r\n    var clientePassword by remember { mutableStateOf(\"\") }\r\n    var clienteEmpresaSeleccionada by remember { mutableStateOf(\"\") }\r\n    val fontAksharPrincipal = FontFamily(Font(R.font.akshar_medium))\r\n    val arrayEmpresasDisponibles = remember { mutableStateListOf<String>() }\r\n    var expandirDdmOpcionesEmpresas by remember { mutableStateOf(false) }\r\n    var textFieldOpcionesEmpresasMedida by remember { mutableStateOf(Size.Zero) }\r\n    val iconoDdmOpcionesEmpresasFlechasLaterales = if (expandirDdmOpcionesEmpresas) Icons.Filled.KeyboardArrowUp else Icons.Filled.KeyboardArrowDown\r\n    val estructuraParaValidacionCorreo = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z0-9]{2,}$\"\r\n    val objetoValidadorCorreo = Pattern.compile(estructuraParaValidacionCorreo)\r\n    var mostrarPasswordOtxf by remember { mutableStateOf(false) }\r\n    var existenCorreos by remember { mutableStateOf<Boolean?>(true) }\r\n    var isInicioSesionAprobado by remember { mutableStateOf(false) }\r\n    var apiToken by remember { mutableStateOf(\"\") }\r\n    var clienteNombreEmpresa by remember { mutableStateOf(\"\") }\r\n    var clienteNombreUsuario by remember { mutableStateOf(\"\") }\r\n    val objetoProcesamientoDatosApi= ProcesamientoDatosInterfazInicioSesion()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    var snackbarVisible by remember { mutableStateOf(false) }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var errorResultadoApi by remember { mutableStateOf<Boolean?>(false) }\r\n    val iconoSnht= if(errorResultadoApi==true) Icons.Filled.Error else Icons.Filled.Check\r\n    val colorIconoSnht= if (errorResultadoApi==true) Color.Red else Color.Green\r\n    val isBtIniciarSesionActivo = remember { mutableStateOf(true) }\r\n    val contexto = LocalContext.current\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    var apiConsultaActual by remember { mutableStateOf<Job?>(null) }\r\n    val cortinaConsultaApi= CoroutineScope(Dispatchers.IO)\r\n    var isCorreoIngresadoValido by remember { mutableStateOf(false) }\r\n    val scrollState= rememberScrollState(0)\r\n\r\n    LaunchedEffect(isInicioSesionAprobado) {\r\n        if (isInicioSesionAprobado){\r\n            navController?.navigate(RutasPantallasPrincipales.PantallaMenuPrincipal.ruta+\"/$apiToken/$clienteNombreEmpresa/$clienteNombreUsuario\")\r\n        }\r\n    }\r\n\r\n\r\n    LaunchedEffect(snackbarHostState) {\r\n        snackbarHostState.currentSnackbarData?.dismiss()\r\n\r\n    }\r\n\r\n    ConstraintLayout (\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(Color.White)\r\n            .statusBarsPadding()\r\n            .navigationBarsPadding()\r\n    ) {\r\n        //Referencias para ajustar componetes en la Interfaz\r\n        val (bxCirculoSuperiorAzulInterfaz, crdContenedoraComponetesEntradaDatos, bxContenedorLogo,\r\n            txBienvenido, snhtMensajesSuperiores)= createRefs()\r\n\r\n        // Box Circular Superior azul con degradado\r\n        Canvas(\r\n            modifier = Modifier\r\n                .width(objetoAdaptardor.ajustarAnchoCompact(650))\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(650))\r\n                .constrainAs(bxCirculoSuperiorAzulInterfaz) {\r\n                    top.linkTo(parent.top, margin = objetoAdaptardor.ajustarAlturaCompact(-300))\r\n                    start.linkTo(parent.start, margin = 0.dp)\r\n                }\r\n        ) {\r\n            val colorAzulDegradado = Brush.linearGradient(\r\n                colors = listOf(Color(0xFF244BC0), Color(0xFF244BC0)), // Colores del degradado\r\n                start = Offset(1000f, 500f), // Punto inicial del degradado\r\n                end = Offset(500f, 500f) // Punto final del degradado\r\n            )\r\n            drawCircle(\r\n                radius = size.minDimension,\r\n                brush = colorAzulDegradado\r\n            )\r\n        }\r\n\r\n        //Box Contenedor del Logo\r\n        Box(\r\n            modifier = Modifier\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(130))\r\n                .width(objetoAdaptardor.ajustarAnchoCompact(115))\r\n                .constrainAs(bxContenedorLogo) {\r\n                    top.linkTo(parent.top, margin = objetoAdaptardor.ajustarAlturaCompact(37))\r\n                    start.linkTo(parent.start, margin = objetoAdaptardor.ajustarAnchoCompact(134))\r\n                }\r\n        ) {\r\n            // Logo Invefacon\r\n            Image(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .align(Alignment.Center),\r\n                painter = painterResource(id = R.drawable.logo_invenfacon),\r\n                contentDescription = \"Descripción de la imagen\",\r\n                contentScale = ContentScale.Fit\r\n            )\r\n        }\r\n\r\n        //Texto Binevenido\r\n        Text(\r\n            modifier = Modifier\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(60))\r\n                .wrapContentSize()\r\n                .fillMaxWidth()\r\n                .constrainAs(txBienvenido) {\r\n                    top.linkTo(parent.top, margin = objetoAdaptardor.ajustarAlturaCompact(177))\r\n                },\r\n            fontFamily = fontAksharPrincipal,\r\n            fontWeight = FontWeight.Bold,\r\n            color = Color.White,\r\n            fontSize = objetoAdaptardor.ajustarFont(50),\r\n            text = \"¡Bienvenido!\",\r\n            textAlign = TextAlign.Center,\r\n            maxLines = 1,\r\n            overflow = TextOverflow.Ellipsis\r\n        )\r\n\r\n        //Card contenedora de componetes de entrada de datos\r\n        Card(\r\n            modifier = Modifier\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(455))\r\n                .width(objetoAdaptardor.ajustarAnchoCompact(339))\r\n                .shadow(\r\n                    elevation = objetoAdaptardor.ajustarAlturaCompact(7),\r\n                    shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(20))\r\n                )\r\n                .constrainAs(crdContenedoraComponetesEntradaDatos) {\r\n                    top.linkTo(parent.top, margin = objetoAdaptardor.ajustarAlturaCompact(247))\r\n                    start.linkTo(parent.start, margin = objetoAdaptardor.ajustarAnchoCompact(22))\r\n                },\r\n            shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(20)),\r\n            colors = CardDefaults.cardColors(containerColor = Color.White)\r\n        ) {\r\n\r\n            //Box contenedor de componentes de entrada de datos, su funcion es centrar los componetes dentro del Card\r\n            Box(\r\n                modifier =Modifier\r\n                    .fillMaxSize(),\r\n                contentAlignment = Alignment.TopCenter //Alinea los compoentes que esten detro del Box\r\n            ){\r\n                // Columna para alinear los componetes que esten dentro de ella de forma vertical\r\n                // Contiene los componetentes para obtener el correo y las contraseñas y mostrar las empresas\r\n                Column(\r\n                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                    verticalArrangement = Arrangement.Center\r\n                ) {\r\n\r\n                    // Spacer para para mantener un margen en la parte parte superior\r\n                    Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8)))\r\n\r\n                    // Texto Inicio Sesion\r\n                    Text(\r\n                        text = \"Inicio Sesion\",\r\n                        fontSize = objetoAdaptardor.ajustarFont(45),\r\n                        fontFamily = fontAksharPrincipal,\r\n                        fontWeight = FontWeight.Bold,\r\n                        color = Color(0xFF5B5B5B),\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis,\r\n                        modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(57))\r\n                    )\r\n\r\n                    LaunchedEffect(clienteCorreoEmpresa) {\r\n                        clienteCorreoEmpresa= clienteCorreoEmpresa.replace(\" \", \"\")\r\n                        arrayEmpresasDisponibles.clear()\r\n                        clienteEmpresaSeleccionada=\"\"\r\n                        existenCorreos= true\r\n                        apiConsultaActual?.cancel()\r\n                        isCorreoIngresadoValido= objetoValidadorCorreo.matcher(clienteCorreoEmpresa).matches()\r\n                        //Si el correo ingresado es valido ingresa la if\r\n                        if(isCorreoIngresadoValido){\r\n                            //Se pone null para iniciar el circulo de carga\r\n                            existenCorreos=null\r\n                            apiConsultaActual= cortinaConsultaApi.launch{\r\n                                delay(1000)\r\n                                val resultApi= objetoProcesamientoDatosApi.obtenerNombresEmpresasPorCorreo(clienteCorreoEmpresa) // Datos retornados del API\r\n\r\n                                //Si la respuesta del api es null es porque no hay conexion a Internet o hubo problemas con la conexion al servidor\r\n                                if(resultApi==null){\r\n                                    clienteCorreoEmpresa=\"\"// Se pone vacio para limpiar el correo ingresado\r\n                                    existenCorreos=true // se pone en true para quitar la barra de carga y mostrar la caja de empresas\r\n\r\n                                    // Se lanza el mensaje de error en la conexion en la red\r\n                                    if (!snackbarVisible) {\r\n                                        errorResultadoApi=true\r\n                                        coroutineScope.launch {\r\n                                            snackbarVisible=true\r\n                                            snackbarHostState.showSnackbar(\r\n                                                message = \"Error: revise su conexión a Internet\"\r\n                                            )\r\n                                            snackbarHostState.currentSnackbarData?.dismiss()\r\n                                            snackbarVisible=false\r\n                                        }\r\n                                    }\r\n\r\n                                }else if(resultApi.getInt(\"code\")==921){\r\n                                    existenCorreos=null\r\n                                }else if(resultApi.getString(\"status\")==\"error\"){\r\n                                    existenCorreos=false\r\n                                }\r\n                                else if(resultApi.getString(\"status\")==\"ok\"){\r\n                                    val arrayEmpresas= resultApi.getJSONArray(\"data\")\r\n                                    for (i in 0 until arrayEmpresas.length()) {\r\n                                        val empresa = arrayEmpresas.getJSONObject(i).getString(\"empresa\") // O el campo correspondiente\r\n                                        arrayEmpresasDisponibles.add(empresa)\r\n                                    }\r\n                                    scrollState.scrollTo(0)\r\n                                    ocultarTeclado(contexto)\r\n                                    existenCorreos=true\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    // Input Correo Cliente\r\n                    OutlinedTextField(\r\n                        value = clienteCorreoEmpresa,\r\n                        onValueChange =  {\r\n                            clienteCorreoEmpresa = it\r\n                        },\r\n                        enabled = isBtIniciarSesionActivo.value,\r\n                        label = {\r\n                            Text(\"Correo\",\r\n                                fontFamily = fontAksharPrincipal,\r\n                                fontWeight = FontWeight.Light,\r\n                                color = if (existenCorreos==null || existenCorreos==true) Color(0xFF5B5B5B) else Color.Red,\r\n                                fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis\r\n                            )\r\n                        },\r\n                        leadingIcon = {\r\n                            Icon(\r\n                                Icons.Default.Email,\r\n                                contentDescription = \"Email Icon\",\r\n                                tint = if (existenCorreos==null || existenCorreos==true) Color.DarkGray else Color.Red)\r\n                        },\r\n                        shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(16)),\r\n                        textStyle = TextStyle(\r\n                            fontFamily = fontAksharPrincipal,\r\n                            fontWeight = FontWeight.Light,\r\n                            fontSize = objetoAdaptardor.ajustarFont(16)\r\n                        ),\r\n                        trailingIcon = {\r\n                            if (existenCorreos==false) {\r\n                                Icon(\r\n                                    imageVector = Icons.Default.Error,\r\n                                    contentDescription = \"Correo inválido\",\r\n                                    tint = Color.Red\r\n                                )\r\n                            }\r\n                        },\r\n                        placeholder = {\r\n                            Text(\r\n                                \"Ingrese su correo\",\r\n                                fontFamily = fontAksharPrincipal,\r\n                                fontWeight = FontWeight.Light,\r\n                                fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis\r\n\r\n                            )\r\n                        },\r\n                        modifier = Modifier\r\n                            .width(objetoAdaptardor.ajustarAnchoCompact(300))\r\n                            .height(objetoAdaptardor.ajustarAlturaCompact(70)),\r\n                        singleLine = true,\r\n                        colors = OutlinedTextFieldDefaults.colors(\r\n                            focusedTextColor = Color.DarkGray,\r\n                            unfocusedTextColor = Color.DarkGray,\r\n                            focusedPlaceholderColor = Color.DarkGray,\r\n                            unfocusedPlaceholderColor = Color.DarkGray,\r\n                            focusedBorderColor = if (existenCorreos==null || existenCorreos==true) Color(0xFF5B5B5B) else Color.Red,\r\n                            unfocusedBorderColor = if (existenCorreos==null || existenCorreos==true) Color(0xFF5B5B5B) else Color.Red,\r\n                            cursorColor = Color.DarkGray\r\n                        )\r\n                    )//Fin Input Correo Cliente\r\n\r\n\r\n                    //Spacer seperador de componente\r\n                    Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(20)))\r\n\r\n                    //Segun es el estado de la variable se va a mostrar un componente\r\n                    // Su funcion es mostrar el estado de busqueda de correos como caragando, correo no econtrado y los resulatados en caso de que el correo este asociado a una empresa\r\n                    when(existenCorreos){\r\n                        null ->{\r\n                            Column(horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center) {\r\n                                CircularProgressIndicator(\r\n                                    strokeWidth = objetoAdaptardor.ajustarAlturaCompact(4),\r\n                                    color = Color(0xFF244BC0)\r\n                                )\r\n                                Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(4)))\r\n                                Text(\r\n                                    \"Buscando empresas asociadas al correo...\",\r\n                                    fontFamily = fontAksharPrincipal,\r\n                                    fontWeight = FontWeight.Light,\r\n                                    fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                    maxLines = 1,\r\n                                    overflow = TextOverflow.Ellipsis\r\n                                )\r\n                            }\r\n\r\n                        }// Mostrar Circulo de carga\r\n                        false->{\r\n                            val txtEstadoBusquedaCorreo=\"No se encontró ninguna empresa asociada a $clienteCorreoEmpresa\"\r\n                            Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center){\r\n                                Text(\r\n                                    text = txtEstadoBusquedaCorreo,\r\n                                    color = Color.Red,\r\n                                    fontFamily = fontAksharPrincipal,\r\n                                    fontWeight = FontWeight.Medium,\r\n                                    textAlign = TextAlign.Center\r\n                                    ,\r\n                                    fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                    maxLines = 2,\r\n                                    overflow = TextOverflow.Ellipsis\r\n                                )\r\n                            }\r\n                        }// Mostrar Mensaje Correo no encontrado\r\n                        else->{\r\n                            var numeroPaginaDdm by remember { mutableIntStateOf(0) }\r\n                            val cantidadEmpresasPorPagina = 50\r\n                            val totalPaginas = (arrayEmpresasDisponibles.size + cantidadEmpresasPorPagina - 1) / cantidadEmpresasPorPagina\r\n                            val nombresEmpresasPaginaActual =\r\n                                arrayEmpresasDisponibles.drop(numeroPaginaDdm * cantidadEmpresasPorPagina)\r\n                                    .take(cantidadEmpresasPorPagina)\r\n\r\n                            ExposedDropdownMenuBox(\r\n                                expanded = expandirDdmOpcionesEmpresas,\r\n                                onExpandedChange = { if (isBtIniciarSesionActivo.value) {expandirDdmOpcionesEmpresas = !expandirDdmOpcionesEmpresas} }\r\n                            ) {\r\n                                OutlinedTextField(\r\n                                    value = clienteEmpresaSeleccionada,\r\n                                    readOnly = true,\r\n                                    enabled = isBtIniciarSesionActivo.value,\r\n                                    onValueChange = { clienteEmpresaSeleccionada = it },\r\n                                    leadingIcon = {\r\n                                        Icon(\r\n                                            Icons.Default.Home,\r\n                                            contentDescription = \"Email Icon\",\r\n                                            tint = Color.DarkGray\r\n                                        )\r\n                                    },\r\n                                    trailingIcon = {\r\n                                        Icon(\r\n                                            imageVector = iconoDdmOpcionesEmpresasFlechasLaterales,\r\n                                            contentDescription = \" \"\r\n                                        )\r\n                                    },\r\n                                    textStyle = TextStyle(\r\n                                        fontFamily = fontAksharPrincipal,\r\n                                        fontWeight = FontWeight.Light,\r\n                                        color = Color.DarkGray,\r\n                                        fontSize = objetoAdaptardor.ajustarFont(16)\r\n                                    ),\r\n                                    shape = RoundedCornerShape(\r\n                                        objetoAdaptardor.ajustarAlturaCompact(\r\n                                            16\r\n                                        )\r\n                                    ),\r\n                                    placeholder = {\r\n                                        var estadoSeleccionEmpresa = \"Seleccione su Empresa\"\r\n                                        if (arrayEmpresasDisponibles.isEmpty()) {\r\n                                            estadoSeleccionEmpresa = \"Ingrese un correo válido\"\r\n\r\n                                        }\r\n                                        Text(\r\n                                            estadoSeleccionEmpresa,\r\n                                            fontFamily = fontAksharPrincipal,\r\n                                            fontWeight = FontWeight.Light,\r\n                                            color = Color.DarkGray,\r\n                                            fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                            maxLines = 1,\r\n                                            overflow = TextOverflow.Ellipsis\r\n                                        )\r\n                                    },\r\n                                    modifier = Modifier\r\n                                        .width(objetoAdaptardor.ajustarAnchoCompact(300))\r\n                                        .height(objetoAdaptardor.ajustarAlturaCompact(70))\r\n                                        .onGloballyPositioned { coordinates ->\r\n                                            textFieldOpcionesEmpresasMedida =\r\n                                                coordinates.size.toSize()\r\n                                        }\r\n                                        .menuAnchor(),\r\n                                    label = {\r\n                                        Text(\r\n                                            \"Empresa\",\r\n                                            color = Color.DarkGray,\r\n                                            fontFamily = fontAksharPrincipal,\r\n                                            fontWeight = FontWeight.Light,\r\n                                            fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                            maxLines = 1,\r\n                                            overflow = TextOverflow.Ellipsis\r\n                                        )\r\n                                    },\r\n                                    colors = OutlinedTextFieldDefaults.colors(\r\n                                        focusedTextColor = Color(0xFF5B5B5B),\r\n                                        unfocusedTextColor = Color(0xFF5B5B5B),\r\n                                        focusedPlaceholderColor = Color(0xFF5B5B5B),\r\n                                        unfocusedPlaceholderColor = Color(0xFF5B5B5B),\r\n                                        focusedBorderColor = Color(0xFF5B5B5B),\r\n                                        unfocusedBorderColor = Color(0xFF5B5B5B),\r\n                                        cursorColor = Color.DarkGray\r\n                                    )\r\n                                )\r\n\r\n\r\n                                ExposedDropdownMenu(\r\n                                    expanded = expandirDdmOpcionesEmpresas,\r\n                                    onDismissRequest = { expandirDdmOpcionesEmpresas = false },\r\n                                    modifier = Modifier\r\n                                        .width(with(LocalDensity.current) { textFieldOpcionesEmpresasMedida.width.toDp() })\r\n                                        .background(Color.White),\r\n                                    scrollState = scrollState\r\n                                ) {\r\n                                    nombresEmpresasPaginaActual.forEach { label ->\r\n                                        DropdownMenuItem(\r\n                                            onClick = {\r\n                                                clienteEmpresaSeleccionada = label\r\n                                                expandirDdmOpcionesEmpresas = false\r\n                                            },\r\n                                            text = {\r\n                                                Text(\r\n                                                    text = label,\r\n                                                    fontFamily = fontAksharPrincipal,\r\n                                                    fontWeight = FontWeight.Medium,\r\n                                                    fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                                    maxLines = 1,\r\n                                                    overflow = TextOverflow.Ellipsis\r\n                                                )\r\n                                            },\r\n                                            modifier = Modifier\r\n                                                .background(Color.White),\r\n                                            enabled = isBtIniciarSesionActivo.value\r\n                                        )\r\n                                    }\r\n                                    if (numeroPaginaDdm < totalPaginas - 1) {\r\n                                        DropdownMenuItem(\r\n                                            onClick = { numeroPaginaDdm++ },\r\n                                            text = {\r\n                                                Text(\r\n                                                    \"Mostrar más\",\r\n                                                    fontFamily = fontAksharPrincipal,\r\n                                                    fontWeight = FontWeight.Medium,\r\n                                                    color = Color(0xFF31B927),\r\n                                                    fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                                    maxLines = 1,\r\n                                                    overflow = TextOverflow.Ellipsis\r\n                                                )\r\n                                            },\r\n                                            modifier = Modifier\r\n                                                .background(Color.White),\r\n                                            enabled = isBtIniciarSesionActivo.value\r\n                                        )\r\n                                    }\r\n\r\n                                    if (numeroPaginaDdm > 0) {\r\n                                        DropdownMenuItem(\r\n                                            onClick = { numeroPaginaDdm-- },\r\n                                            text = {\r\n                                                Text(\r\n                                                    text = \"Mostrar anteriores\",\r\n                                                    fontFamily = fontAksharPrincipal,\r\n                                                    fontWeight = FontWeight.Medium,\r\n                                                    color = Color.Red,\r\n                                                    fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                                    maxLines = 1,\r\n                                                    overflow = TextOverflow.Ellipsis\r\n                                                )\r\n                                            },\r\n                                            modifier = Modifier\r\n                                                .background(Color.White),\r\n                                            enabled = isBtIniciarSesionActivo.value\r\n                                        )\r\n                                    }\r\n                                }\r\n                            }\r\n                        }// Mostrar Lista desplegable de las empresas encontradas con base al correo\r\n                    }\r\n\r\n                    //Spacer seperador de componente\r\n                    Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(20)))\r\n\r\n                    // Input Contraseña Cliente\r\n                    OutlinedTextField(\r\n                        value = clientePassword,\r\n                        onValueChange = { newText -> clientePassword = newText },\r\n                        label = {\r\n                            Text(\r\n                                \"Contraseña\",\r\n                                color = Color.DarkGray,\r\n                                fontFamily = fontAksharPrincipal,\r\n                                fontWeight = FontWeight.Light,\r\n                                fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis\r\n                            )\r\n                        },\r\n                        leadingIcon = { Icon(Icons.Default.Lock, contentDescription = \"Email Icon\", tint = Color.DarkGray) },\r\n                        placeholder = {\r\n                            Text(\r\n                                \"Ingrese su contraseña\",\r\n                                fontFamily = fontAksharPrincipal,\r\n                                fontWeight = FontWeight.Light,\r\n                                fontSize = objetoAdaptardor.ajustarFont(16),\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis\r\n                            )\r\n                        },\r\n                        modifier = Modifier\r\n                            .width(objetoAdaptardor.ajustarAnchoCompact(300))\r\n                            .height(objetoAdaptardor.ajustarAlturaCompact(70)),\r\n                        visualTransformation = if (mostrarPasswordOtxf) VisualTransformation.None else PasswordVisualTransformation(),\r\n                        trailingIcon = {\r\n                            val image = if (mostrarPasswordOtxf)\r\n                                Icons.Filled.Visibility\r\n                            else Icons.Filled.VisibilityOff\r\n\r\n                            IconButton(onClick = { mostrarPasswordOtxf = !mostrarPasswordOtxf }) {\r\n                                Icon(imageVector = image, contentDescription = \"Mostrar/Ocultar contraseña\", tint = Color.DarkGray)\r\n                            }\r\n                        },\r\n                        enabled = isBtIniciarSesionActivo.value,\r\n                        singleLine = true,\r\n                        textStyle = TextStyle(fontFamily = fontAksharPrincipal, fontWeight = FontWeight.Light, color = Color.DarkGray, fontSize = objetoAdaptardor.ajustarFont(16)),\r\n                        shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(16)),\r\n                        colors = OutlinedTextFieldDefaults.colors(\r\n                            focusedTextColor = Color(0xFF5B5B5B), // Color del texto cuando está enfocado\r\n                            unfocusedTextColor = Color(0xFF5B5B5B),\r\n                            focusedPlaceholderColor =  Color(0xFF5B5B5B),\r\n                            unfocusedPlaceholderColor = Color(0xFF5B5B5B),\r\n                            focusedBorderColor =  Color(0xFF5B5B5B),\r\n                            unfocusedBorderColor = Color(0xFF5B5B5B)\r\n                        ),\r\n                        keyboardOptions = KeyboardOptions.Default.copy(\r\n                            imeAction = ImeAction.Go\r\n                        ),\r\n                        keyboardActions = KeyboardActions(\r\n                            onGo = {\r\n                                apiConsultaActual?.cancel()\r\n                                errorResultadoApi=null\r\n                                if (clienteEmpresaSeleccionada.isEmpty()){\r\n                                    errorResultadoApi=true\r\n                                    if (!snackbarVisible) {\r\n                                        coroutineScope.launch {\r\n                                            snackbarVisible=true\r\n                                            snackbarHostState.showSnackbar(\r\n                                                message = \"Error: seleccione una empresa\"\r\n                                            )\r\n                                            snackbarHostState.currentSnackbarData?.dismiss()\r\n                                            snackbarVisible=false\r\n                                        }\r\n                                    }\r\n                                }else{\r\n                                    isBtIniciarSesionActivo.value= false\r\n                                }\r\n                            }\r\n                        )\r\n                    )\r\n\r\n                    // Spacer separador de componente\r\n                    Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(20)))\r\n\r\n                    if (!isBtIniciarSesionActivo.value){\r\n                        LaunchedEffect(isBtIniciarSesionActivo) {\r\n                            apiConsultaActual= cortinaConsultaApi.launch{\r\n                                val result= objetoProcesamientoDatosApi.validarInicioSesion(clienteCorreoEmpresa, clienteEmpresaSeleccionada, clientePassword)\r\n                                if(result==null){\r\n                                    if (!snackbarVisible) {\r\n                                        errorResultadoApi=true\r\n                                        coroutineScope.launch {\r\n                                            snackbarVisible=true\r\n                                            snackbarHostState.showSnackbar(\r\n                                                message = \"Error: revise su conexion a Internet\"\r\n                                            )\r\n                                            snackbarHostState.currentSnackbarData?.dismiss()\r\n                                            snackbarVisible=false\r\n                                            isBtIniciarSesionActivo.value= true\r\n                                        }\r\n                                    }\r\n                                }else if (result.getString(\"status\")==\"error\"){\r\n                                    delay(1000)\r\n                                    errorResultadoApi=true\r\n                                    isBtIniciarSesionActivo.value= true\r\n                                    if (!snackbarVisible) {\r\n                                        coroutineScope.launch {\r\n                                            snackbarVisible=true\r\n                                            snackbarHostState.showSnackbar(\r\n                                                message = \"Error: ${result.getString(\"data\")}\"\r\n                                            )\r\n                                            snackbarHostState.currentSnackbarData?.dismiss()\r\n                                            snackbarVisible=false\r\n                                        }\r\n                                    }\r\n                                }else if (result.getString(\"status\")==\"ok\"){\r\n                                    coroutineScope.cancel()\r\n                                    val datos= result.getJSONObject(\"data\")\r\n                                    clienteNombreUsuario= datos.getString(\"Nombre\")\r\n                                    clienteNombreEmpresa= datos.getString(\"Empresa\")\r\n                                    apiToken= datos.getString(\"Token\")\r\n                                    delay(1000)\r\n                                    isInicioSesionAprobado=true\r\n\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    //Boton Iniciar Sesion\r\n                    Button(\r\n                        onClick = {\r\n                            apiConsultaActual?.cancel()\r\n                            errorResultadoApi=null\r\n                            if (clienteEmpresaSeleccionada.isEmpty()){\r\n                                errorResultadoApi=true\r\n                                if (!snackbarVisible) {\r\n                                    coroutineScope.launch {\r\n                                        snackbarVisible=true\r\n                                        snackbarHostState.showSnackbar(\r\n                                            message = \"Error: seleccione una empresa\"\r\n                                        )\r\n                                        snackbarHostState.currentSnackbarData?.dismiss()\r\n                                        snackbarVisible=false\r\n                                    }\r\n                                }\r\n                            }else{\r\n                                isBtIniciarSesionActivo.value= false\r\n                            }\r\n                        },\r\n                        enabled = isBtIniciarSesionActivo.value,\r\n                        colors = ButtonDefaults.buttonColors(\r\n                            containerColor = Color(0xFF244BC0), // Color de fondo del botón\r\n                            contentColor = Color.White,\r\n                            disabledContainerColor = Color(0xFF244BC0),\r\n                            disabledContentColor = Color.White\r\n                        ), // Color del texto del botón\r\n                        shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(12)),\r\n                        elevation = ButtonDefaults.buttonElevation(defaultElevation = 5.dp),\r\n                        border = BorderStroke(width = objetoAdaptardor.ajustarAnchoCompact(2), brush = SolidColor(Color(0xFF244BC0))),\r\n                        modifier = Modifier\r\n                            .width(objetoAdaptardor.ajustarAnchoCompact(200))\r\n                            .height(objetoAdaptardor.ajustarAlturaCompact(50))\r\n                    ){\r\n                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){\r\n                            Text(\r\n                                \"Iniciar Sesion\",\r\n                                fontFamily = fontAksharPrincipal,\r\n                                fontWeight = FontWeight.Medium,\r\n                                fontSize = objetoAdaptardor.ajustarFont(25),\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis,\r\n                                textAlign = TextAlign.Center\r\n                            )\r\n                        }\r\n                        // Texto Boton\r\n                    }\r\n\r\n                    // Spacer separador de componente\r\n                    Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(15)))\r\n\r\n                    // Texto Inferior\r\n                    Text(\"¿Olvidaste tu contraseña?\",\r\n                        fontFamily =  fontAksharPrincipal,\r\n                        fontWeight = FontWeight.Light,\r\n                        color = Color(0xFF244BC0),\r\n                        fontSize = objetoAdaptardor.ajustarFont(15),\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis,\r\n                        modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(35))\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        // Snackbar inferior para mostrar mensajes emergentes para el usuario como:\r\n        // - Problemas de Red\r\n        // - Contraseñas Incorrectas\r\n        // - Correos incorrectos o no encontrados\r\n        SnackbarHost(\r\n            hostState = snackbarHostState,\r\n            snackbar = { snackbarData ->\r\n                Snackbar(\r\n                    containerColor = Color.White, // Color de fondo del Snackbar\r\n                    contentColor = Color.DarkGray // Color del texto del Snackbar\r\n\r\n                ) {\r\n                    Row(\r\n                        modifier = Modifier.padding(objetoAdaptardor.ajustarAlturaCompact(8)),// Añadir algo de padding para espaciado\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = iconoSnht,\r\n                            contentDescription = \"Icono de error\",\r\n                            tint = colorIconoSnht, // Cambiar el color del ícono si deseas\r\n                            modifier = Modifier\r\n                                .padding(end = objetoAdaptardor.ajustarAnchoCompact(8))\r\n                                .size(objetoAdaptardor.ajustarAlturaCompact(35)) // Espacio entre ícono y texto\r\n                        )\r\n                        Text(\r\n                            text = snackbarData.visuals.message,\r\n                            style = TextStyle(\r\n                                color = Color.Black,\r\n                                fontSize = objetoAdaptardor.ajustarFont(18),\r\n                                fontWeight = FontWeight.Light,\r\n                                fontFamily = fontAksharPrincipal\r\n                            ),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .constrainAs(snhtMensajesSuperiores) {\r\n                    top.linkTo(parent.top, margin = objetoAdaptardor.ajustarAlturaCompact(24))\r\n                    start.linkTo(parent.start)\r\n                }\r\n        )\r\n\r\n\r\n        if (errorResultadoApi==null){\r\n            estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)\r\n        }\r\n        else{\r\n            estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)\r\n        }\r\n    }\r\n}\r\n\r\nfun ocultarTeclado(contexto: Context) {\r\n    val inputMethodManager = contexto.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n    val view = (contexto as? Activity)?.currentFocus\r\n    view?.let {\r\n        inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true, widthDp = 384, heightDp = 812, fontScale = 1.15F)\r\n@Composable\r\nprivate fun Preview(){\r\n    val systemUiController = rememberSystemUiController()\r\n    val estadoPantallaCarga = EstadoPantallaCarga()\r\n    IniciarInterfazInicioSesionCompact(null, systemUiController,estadoPantallaCarga)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/inicio_sesion/InterfazInicioSesionCompact.kt b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/inicio_sesion/InterfazInicioSesionCompact.kt
--- a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/inicio_sesion/InterfazInicioSesionCompact.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/inicio_sesion/InterfazInicioSesionCompact.kt	(date 1733439051087)
@@ -94,6 +94,7 @@
 import com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasPrincipales
 import com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga
+import com.soportereal.invefacon.interfaces.compact.pantallas_principales._estadoPantallaCarga
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.Job
@@ -147,6 +148,7 @@
     val cortinaConsultaApi= CoroutineScope(Dispatchers.IO)
     var isCorreoIngresadoValido by remember { mutableStateOf(false) }
     val scrollState= rememberScrollState(0)
+    _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
 
     LaunchedEffect(isInicioSesionAprobado) {
         if (isInicioSesionAprobado){
@@ -291,29 +293,23 @@
                             apiConsultaActual= cortinaConsultaApi.launch{
                                 delay(1000)
                                 val resultApi= objetoProcesamientoDatosApi.obtenerNombresEmpresasPorCorreo(clienteCorreoEmpresa) // Datos retornados del API
-
                                 //Si la respuesta del api es null es porque no hay conexion a Internet o hubo problemas con la conexion al servidor
                                 if(resultApi==null){
-                                    clienteCorreoEmpresa=""// Se pone vacio para limpiar el correo ingresado
-                                    existenCorreos=true // se pone en true para quitar la barra de carga y mostrar la caja de empresas
-
-                                    // Se lanza el mensaje de error en la conexion en la red
-                                    if (!snackbarVisible) {
-                                        errorResultadoApi=true
+                                    existenCorreos=null
+                                }else if(resultApi.getString("status")=="error"){
+                                    existenCorreos=false
+                                    errorResultadoApi=true
+                                    if (!snackbarVisible) {
                                         coroutineScope.launch {
                                             snackbarVisible=true
                                             snackbarHostState.showSnackbar(
-                                                message = "Error: revise su conexión a Internet"
+                                                message = "Error: ${resultApi.getString("data")}"
                                             )
                                             snackbarHostState.currentSnackbarData?.dismiss()
                                             snackbarVisible=false
                                         }
                                     }
-
-                                }else if(resultApi.getInt("code")==921){
-                                    existenCorreos=null
-                                }else if(resultApi.getString("status")=="error"){
-                                    existenCorreos=false
+                                    _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
                                 }
                                 else if(resultApi.getString("status")=="ok"){
                                     val arrayEmpresas= resultApi.getJSONArray("data")
@@ -839,10 +835,13 @@
 
 
         if (errorResultadoApi==null){
-            estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
+            _estadoPantallaCarga.cambiarEstadoSoloVisualizacionPantallaCarga(true)
+            _estadoPantallaCarga.cambiarEstadoVisualizacionPantallaCarga(true)
+            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
+
         }
         else{
-            estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
+            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
         }
     }
 }
Index: app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/RutasUi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.funciones_de_interfaces\r\n\r\nimport androidx.compose.animation.core.FastOutSlowInEasing\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.slideInHorizontally\r\nimport androidx.compose.animation.slideOutHorizontally\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.Logout\r\nimport androidx.compose.material.icons.filled.Home\r\nimport androidx.compose.material.icons.filled.Settings\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.navArgument\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasMenuPrincipal.PantallaAjustes\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasMenuPrincipal.PantallaInicio\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasMenuPrincipal.PantallaSalir\r\nimport com.soportereal.invefacon.interfaces.compact.inicio_sesion.IniciarInterfazInicioSesionCompact\r\nimport com.soportereal.invefacon.interfaces.compact.modulos.clientes.IniciarInterfazAgregarCliente\r\nimport com.soportereal.invefacon.interfaces.compact.modulos.clientes.IniciarInterfazInformacionCliente\r\nimport com.soportereal.invefacon.interfaces.compact.modulos.clientes.IniciarInterfazModuloClientes\r\nimport com.soportereal.invefacon.interfaces.compact.modulos.clientes.InterfazModuloClientes\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.CustomBarView\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoRespuestaApi\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazAjustes\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazInicio\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazMenuPrincipalCompact\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazSalir\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.InterfazInicio\r\n\r\n\r\nsealed class RutasPantallasPrincipales (\r\n    val ruta: String\r\n)\r\n{\r\n    data object PantallaInicioSesion: RutasPantallasPrincipales(\r\n        ruta = \"PantallaInicioSesion\"\r\n    )\r\n    data object PantallaMenuPrincipal: RutasPantallasPrincipales(\r\n        ruta = \"PantallasMenuPrincipal\"\r\n    )\r\n}\r\n\r\nsealed class RutasPantallasMenuPrincipal(\r\n    val ruta: String,\r\n    val titulo: String,\r\n    val icono: ImageVector\r\n)\r\n{\r\n    data object PantallaInicio: RutasPantallasMenuPrincipal(\r\n        ruta = \"PantallaInicio\",\r\n        titulo = \"Inicio\",\r\n        icono = Icons.Filled.Home\r\n    )\r\n    data object PantallaAjustes: RutasPantallasMenuPrincipal(\r\n        ruta = \"PantallaAjustes\",\r\n        titulo = \"Ajustes\",\r\n        icono = Icons.Filled.Settings\r\n    )\r\n    data object PantallaSalir: RutasPantallasMenuPrincipal(\r\n        ruta = \"PantallaSalir\",\r\n        titulo = \"Salir\",\r\n        icono = Icons.AutoMirrored.Filled.Logout\r\n    )\r\n}\r\n\r\nsealed class RutasPantallasModulos(\r\n    val ruta: String\r\n)\r\n{\r\n    data object PantallaModuloClientes: RutasPantallasModulos(\"PantallaModuloClientes\")\r\n    data object PantllaInicio: RutasPantallasModulos(\"PantallaInicio\")\r\n}\r\n\r\nsealed class RutasPantallasModuloClientes(\r\n    val ruta: String\r\n)\r\n{\r\n    data object PantallaInicioModuloClientes: RutasPantallasModuloClientes(\"PantallaInicioModuloClientes\")\r\n    data object PantallaInfoCliente: RutasPantallasModuloClientes(\"PantallaInfoCliente\")\r\n    data object PantallaAgregarCliente: RutasPantallasModuloClientes(\"PantallaAgregarCliente\")\r\n}\r\n\r\n@Composable\r\nfun NavHostPrincipal(\r\n    navControllerPrincipal: NavHostController\r\n){\r\n    val systemUiController = rememberSystemUiController()\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val estadoPantallaCarga = EstadoPantallaCarga()\r\n    val isCargando by estadoPantallaCarga.isCargandoPantallaPrincipales.collectAsState()\r\n\r\n    Box(modifier = Modifier.fillMaxSize()){\r\n\r\n        NavHost(navController= navControllerPrincipal, startDestination = RutasPantallasPrincipales.PantallaInicioSesion.ruta){\r\n            composable(RutasPantallasPrincipales.PantallaInicioSesion.ruta\r\n            ) {\r\n                when(dpAnchoPantalla){\r\n                    in 300..600->{\r\n                        IniciarInterfazInicioSesionCompact(navControllerPrincipal,systemUiController, estadoPantallaCarga)\r\n                    }else->{\r\n                    IniciarInterfazInicioSesionCompact(navControllerPrincipal,systemUiController, estadoPantallaCarga)\r\n                    }\r\n                }\r\n            }\r\n            composable(RutasPantallasPrincipales.PantallaMenuPrincipal.ruta+\"/{token}\"+\"/{nombreEmpresa}\"+\"/{nombreUsuario}\",\r\n                arguments = listOf(\r\n                    navArgument(name= \"token\"){\r\n                        type= NavType.StringType\r\n                        defaultValue=\"error\"\r\n                    },\r\n                    navArgument(name= \"nombreEmpresa\"){\r\n                        type= NavType.StringType\r\n                        defaultValue=\"error\"\r\n                    },\r\n                    navArgument(name= \"nombreUsuario\"){\r\n                        type= NavType.StringType\r\n                        defaultValue=\"error\"\r\n                    }\r\n                ),\r\n                enterTransition = { slideInHorizontally { it } + fadeIn() },\r\n                exitTransition = { slideOutHorizontally { -it } + fadeOut() },\r\n                popEnterTransition = { fadeIn() },\r\n                popExitTransition = { fadeOut() }\r\n            ) { backstackEntry->\r\n                val token= requireNotNull(backstackEntry.arguments?.getString(\"token\"))\r\n                val nombreEmpresa= requireNotNull(backstackEntry.arguments?.getString(\"nombreEmpresa\"))\r\n                val nombreUsuario= requireNotNull(backstackEntry.arguments?.getString(\"nombreUsuario\"))\r\n                IniciarInterfazMenuPrincipalCompact(token,nombreEmpresa, nombreUsuario,navControllerPrincipal, systemUiController, estadoPantallaCarga)\r\n            }\r\n        }\r\n\r\n        if (isCargando){\r\n            CustomBarView(systemUiController,isCargando, mensajeEstadoRespuestaApi = \"\")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Composable\r\nfun NavHostPantallasMenuPrincipal(\r\n    innerPadding: PaddingValues,\r\n    token: String,\r\n    nombreUsuario: String,\r\n    nombreEmpresa: String,\r\n    navControllerPrincipal: NavController?,\r\n    navControllerPantallasMenuPrincipal: NavHostController,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga,\r\n    estadoRespuestaApi: EstadoRespuestaApi\r\n){\r\n\r\n    NavHost(\r\n        navController = navControllerPantallasMenuPrincipal,\r\n        startDestination = PantallaInicio.ruta,\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(innerPadding)\r\n    ) {\r\n        composable(\r\n            PantallaInicio.ruta,\r\n            enterTransition = { slideInHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { it } },\r\n            exitTransition = { slideOutHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { -it } }\r\n        ) {\r\n            if (navControllerPrincipal != null) {\r\n                IniciarInterfazInicio(\r\n                    token = token,\r\n                    nombreUsuario = nombreUsuario,\r\n                    nombreEmpresa = nombreEmpresa,\r\n                    navControllerPrincipal = navControllerPrincipal,\r\n                    systemUiController= systemUiController,\r\n                    estadoPantallaCarga= estadoPantallaCarga,\r\n                    estadoRespuestaApi = estadoRespuestaApi\r\n                )\r\n            }\r\n        }\r\n        composable(\r\n            PantallaAjustes.ruta,\r\n            enterTransition = { slideInHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { it } },\r\n            exitTransition = { slideOutHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { -it } }\r\n        ) {\r\n            IniciarInterfazAjustes()\r\n        }\r\n        composable(\r\n            PantallaSalir.ruta\r\n        ) {\r\n            if (navControllerPrincipal != null) {\r\n                IniciarInterfazSalir(navControllerPrincipal)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun NavHostPantallasModulos(\r\n    navControllerPantallasModulos:NavHostController,\r\n    navControllerPrincipal:NavController,\r\n    token: String,\r\n    nombreUsuario: String,\r\n    nombreEmpresa: String,\r\n    innerPadding: PaddingValues,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga,\r\n    estadoRespuestaApi: EstadoRespuestaApi\r\n){\r\n    Box(modifier = Modifier.fillMaxSize()) {\r\n        NavHost(\r\n            navController = navControllerPantallasModulos,\r\n            startDestination = RutasPantallasModulos.PantllaInicio.ruta,\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            composable(\r\n                RutasPantallasModulos.PantallaModuloClientes.ruta,\r\n                enterTransition = {\r\n                    slideInHorizontally(\r\n                        animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n                    ) { it }\r\n                },\r\n                exitTransition = {\r\n                    slideOutHorizontally(\r\n                        animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n                    ) { -it }\r\n                }\r\n            ) {\r\n                IniciarInterfazModuloClientes(token, systemUiController, estadoPantallaCarga, estadoRespuestaApi)\r\n            }\r\n            composable(\r\n                RutasPantallasModulos.PantllaInicio.ruta,\r\n                enterTransition = {\r\n                    slideInHorizontally(\r\n                        animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n                    ) { it }\r\n                },\r\n                exitTransition = {\r\n                    slideOutHorizontally(\r\n                        animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n                    ) { -it }\r\n                }\r\n            ) {\r\n                InterfazInicio(\r\n                    navControllerPantallasModulos = navControllerPantallasModulos,\r\n                    nombreUsuario = nombreUsuario,\r\n                    nombreEmpresa = nombreEmpresa,\r\n                    navControllerPrincipal = navControllerPrincipal,\r\n                    systemUiController = systemUiController,\r\n                    estadoPantallaCarga = estadoPantallaCarga\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun NavHostPantallasModuloClientes(\r\n    apiToken: String,\r\n    navControlerPantallasModuloClientes: NavHostController,\r\n    innerPadding: PaddingValues,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga,\r\n    estadoRespuestaApi: EstadoRespuestaApi\r\n){\r\n    NavHost(\r\n        navController = navControlerPantallasModuloClientes,\r\n        startDestination = RutasPantallasModuloClientes.PantallaInicioModuloClientes.ruta,\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(innerPadding)\r\n    ) {\r\n        composable(\r\n            RutasPantallasModuloClientes.PantallaInicioModuloClientes.ruta,\r\n            enterTransition = { slideInHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { it } },\r\n            exitTransition = { slideOutHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { -it } }\r\n        ){\r\n            InterfazModuloClientes(apiToken, navControlerPantallasModuloClientes, systemUiController,estadoPantallaCarga, estadoRespuestaApi)\r\n        }\r\n\r\n        composable(\r\n            RutasPantallasModuloClientes.PantallaInfoCliente.ruta+\"/{codigoCliente}\",\r\n            arguments = listOf(\r\n                navArgument(name = \"datosCliente\"){\r\n                    type= NavType.StringType\r\n                    defaultValue=\"error\"\r\n                }\r\n            ),\r\n            enterTransition = { slideInHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { it } },\r\n            exitTransition = { slideOutHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { -it } }\r\n        ) {backstackEntry->\r\n            val codigoCliente= requireNotNull(backstackEntry.arguments?.getString(\"codigoCliente\"))\r\n            IniciarInterfazInformacionCliente(\r\n                codigoCliente = codigoCliente,\r\n                navControllerPantallasModuloClientes = navControlerPantallasModuloClientes,\r\n                token = apiToken,\r\n                estadoPantallaCarga= estadoPantallaCarga\r\n            )\r\n        }\r\n\r\n        composable(\r\n            RutasPantallasModuloClientes.PantallaAgregarCliente.ruta,\r\n            enterTransition = { slideInHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { it } },\r\n            exitTransition = { slideOutHorizontally(\r\n                animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\r\n            ) { -it } }\r\n        ) {\r\n            IniciarInterfazAgregarCliente(\r\n                navController = navControlerPantallasModuloClientes,\r\n                token = apiToken,\r\n                estadoPantallaCarga = estadoPantallaCarga\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/RutasUi.kt b/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/RutasUi.kt
--- a/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/RutasUi.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/RutasUi.kt	(date 1733439019261)
@@ -38,12 +38,13 @@
 import com.soportereal.invefacon.interfaces.compact.modulos.clientes.InterfazModuloClientes
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.CustomBarView
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga
-import com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoRespuestaApi
+import com.soportereal.invefacon.interfaces.compact.pantallas_principales.datosEstadoRespuestaApi
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazAjustes
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazInicio
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazMenuPrincipalCompact
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.IniciarInterfazSalir
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.InterfazInicio
+import com.soportereal.invefacon.interfaces.compact.pantallas_principales._estadoPantallaCarga
 
 
 sealed class RutasPantallasPrincipales (
@@ -98,6 +99,8 @@
     data object PantallaAgregarCliente: RutasPantallasModuloClientes("PantallaAgregarCliente")
 }
 
+
+
 @Composable
 fun NavHostPrincipal(
     navControllerPrincipal: NavHostController
@@ -106,7 +109,8 @@
     val configuration = LocalConfiguration.current
     val dpAnchoPantalla = configuration.screenWidthDp
     val estadoPantallaCarga = EstadoPantallaCarga()
-    val isCargando by estadoPantallaCarga.isCargandoPantallaPrincipales.collectAsState()
+    val soloMostrarPantallaCarga by _estadoPantallaCarga.mostrarSoloPantallaCarga.collectAsState()
+
 
     Box(modifier = Modifier.fillMaxSize()){
 
@@ -147,10 +151,10 @@
                 IniciarInterfazMenuPrincipalCompact(token,nombreEmpresa, nombreUsuario,navControllerPrincipal, systemUiController, estadoPantallaCarga)
             }
         }
-
-        if (isCargando){
-            CustomBarView(systemUiController,isCargando, mensajeEstadoRespuestaApi = "")
+        if (soloMostrarPantallaCarga){
+            CustomBarView(systemUiController)
         }
+
     }
 
 }
@@ -165,7 +169,7 @@
     navControllerPantallasMenuPrincipal: NavHostController,
     systemUiController: SystemUiController,
     estadoPantallaCarga: EstadoPantallaCarga,
-    estadoRespuestaApi: EstadoRespuestaApi
+    datosEstadoRespuestaApi: datosEstadoRespuestaApi
 ){
 
     NavHost(
@@ -192,7 +196,7 @@
                     navControllerPrincipal = navControllerPrincipal,
                     systemUiController= systemUiController,
                     estadoPantallaCarga= estadoPantallaCarga,
-                    estadoRespuestaApi = estadoRespuestaApi
+                    datosEstadoRespuestaApi = datosEstadoRespuestaApi
                 )
             }
         }
@@ -227,7 +231,7 @@
     innerPadding: PaddingValues,
     systemUiController: SystemUiController,
     estadoPantallaCarga: EstadoPantallaCarga,
-    estadoRespuestaApi: EstadoRespuestaApi
+    datosEstadoRespuestaApi: datosEstadoRespuestaApi
 ){
     Box(modifier = Modifier.fillMaxSize()) {
         NavHost(
@@ -250,7 +254,7 @@
                     ) { -it }
                 }
             ) {
-                IniciarInterfazModuloClientes(token, systemUiController, estadoPantallaCarga, estadoRespuestaApi)
+                IniciarInterfazModuloClientes(token, systemUiController, estadoPantallaCarga, datosEstadoRespuestaApi)
             }
             composable(
                 RutasPantallasModulos.PantllaInicio.ruta,
@@ -285,7 +289,7 @@
     innerPadding: PaddingValues,
     systemUiController: SystemUiController,
     estadoPantallaCarga: EstadoPantallaCarga,
-    estadoRespuestaApi: EstadoRespuestaApi
+    datosEstadoRespuestaApi: datosEstadoRespuestaApi
 ){
     NavHost(
         navController = navControlerPantallasModuloClientes,
@@ -303,7 +307,7 @@
                 animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)
             ) { -it } }
         ){
-            InterfazModuloClientes(apiToken, navControlerPantallasModuloClientes, systemUiController,estadoPantallaCarga, estadoRespuestaApi)
+            InterfazModuloClientes(apiToken, navControlerPantallasModuloClientes, systemUiController,estadoPantallaCarga, datosEstadoRespuestaApi)
         }
 
         composable(
Index: app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazInicio.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.interfaces.compact.pantallas_principales\r\n\r\nimport androidx.activity.compose.BackHandler\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.ShowChart\r\nimport androidx.compose.material.icons.filled.AccountCircle\r\nimport androidx.compose.material.icons.filled.Assessment\r\nimport androidx.compose.material.icons.filled.CreditCard\r\nimport androidx.compose.material.icons.filled.Description\r\nimport androidx.compose.material.icons.filled.Inventory\r\nimport androidx.compose.material.icons.filled.LocalShipping\r\nimport androidx.compose.material.icons.filled.MonetizationOn\r\nimport androidx.compose.material.icons.filled.People\r\nimport androidx.compose.material.icons.filled.Person\r\nimport androidx.compose.material.icons.filled.Receipt\r\nimport androidx.compose.material.icons.filled.RestaurantMenu\r\nimport androidx.compose.material.icons.filled.ShoppingCart\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.window.DialogProperties\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport coil.compose.SubcomposeAsyncImage\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\nimport com.soportereal.invefacon.R\r\nimport com.soportereal.invefacon.funciones_de_interfaces.NavHostPantallasModulos\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasModulos\r\nimport com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\n\r\n@Composable\r\nfun IniciarInterfazInicio(\r\n    token: String,\r\n    nombreEmpresa: String,\r\n    nombreUsuario: String,\r\n    navControllerPrincipal: NavController,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga,\r\n    estadoRespuestaApi : EstadoRespuestaApi\r\n){\r\n    val navControllerPantallasModulos= rememberNavController()\r\n    Scaffold(\r\n        content = { innerPadding ->\r\n            NavHostPantallasModulos(\r\n                navControllerPantallasModulos = navControllerPantallasModulos,\r\n                navControllerPrincipal = navControllerPrincipal,\r\n                token = token,\r\n                innerPadding = innerPadding,\r\n                nombreUsuario = nombreUsuario,\r\n                nombreEmpresa = nombreEmpresa,\r\n                systemUiController = systemUiController,\r\n                estadoPantallaCarga = estadoPantallaCarga,\r\n                estadoRespuestaApi= estadoRespuestaApi\r\n            )\r\n        }\r\n    )\r\n}\r\n\r\n\r\n@Composable\r\nfun InterfazInicio(\r\n    navControllerPantallasModulos: NavController?,\r\n    navControllerPrincipal: NavController?,\r\n    nombreEmpresa: String,\r\n    nombreUsuario: String,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga\r\n){\r\n    systemUiController.setStatusBarColor(Color(0xFF244BC0))\r\n    systemUiController.setNavigationBarColor(Color.Black)\r\n    val aksharFont = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    var iniciarPantallaModulo by remember { mutableStateOf(false) }\r\n    var rutaPantallaModulo by remember { mutableStateOf(\"\") }\r\n\r\n    // Estado para controlar la visibilidad del diálogo\r\n    val showDialog = remember { mutableStateOf(false) }\r\n\r\n    // Interceptar el botón de retroceso\r\n    BackHandler {\r\n        showDialog.value = true // Mostrar el diálogo\r\n    }\r\n\r\n    // Mostrar el diálogo si es necesario\r\n    if (showDialog.value) {\r\n        AlertDialog(\r\n            modifier = Modifier.background(Color.White),\r\n            containerColor = Color.White,\r\n            onDismissRequest = { showDialog.value = false }, // Cerrar el diálogo sin acción\r\n            title = {\r\n                Text(\r\n                    \"Cerrar sesion\",\r\n                    fontFamily = aksharFont,\r\n                    fontWeight = FontWeight.Medium,\r\n                    color = Color.Black,\r\n                    fontSize = objetoAdaptardor.ajustarFont(18),\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            },\r\n            text = {\r\n                Text(\r\n                    \"¿Estás seguro de que quieres salir?\",\r\n                    fontFamily = aksharFont,\r\n                    fontWeight = FontWeight.Medium,\r\n                    color = Color.Black,\r\n                    fontSize = objetoAdaptardor.ajustarFont(18),\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            },\r\n            confirmButton = {\r\n                Button(\r\n                    colors = ButtonDefaults.buttonColors(\r\n                    containerColor =Color(0xDFC73434), // Color de fondo del botón\r\n                    contentColor = Color.White // Color del contenido (texto e iconos)\r\n                ),\r\n                    onClick = {\r\n                        navControllerPrincipal?.popBackStack() // Salir de la pantalla\r\n                        showDialog.value = false // Cerrar el diálog\r\n                    }\r\n                ) {\r\n                    Text(\r\n                        \"Salir\",\r\n                        fontFamily = aksharFont,\r\n                        fontWeight = FontWeight.Medium,\r\n                        color = Color.White,\r\n                        fontSize = objetoAdaptardor.ajustarFont(17),\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n            },\r\n            dismissButton = {\r\n                Button(\r\n                    onClick = { showDialog.value = false },\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor =Color(0xFF244BC0), // Color de fondo del botón\r\n                        contentColor = Color.White // Color del contenido (texto e iconos)\r\n                    )\r\n                ) {\r\n                    Text(\r\n                        \"Cancelar\",\r\n                        fontFamily = aksharFont,\r\n                        fontWeight = FontWeight.Medium,\r\n                        color = Color.White,\r\n                        fontSize = objetoAdaptardor.ajustarFont(17),\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n            },\r\n            properties = DialogProperties(dismissOnBackPress = false, dismissOnClickOutside = false)\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(iniciarPantallaModulo) {\r\n        if(iniciarPantallaModulo){\r\n            navControllerPantallasModulos?.navigate(rutaPantallaModulo)\r\n        }\r\n    }\r\n\r\n\r\n    ConstraintLayout(modifier = Modifier\r\n        .fillMaxWidth()\r\n        .height(objetoAdaptardor.ajustarAlturaCompact(722))\r\n        .background(Color(0xFFFFFFFF))\r\n        .statusBarsPadding()\r\n        .navigationBarsPadding()\r\n    )\r\n    {\r\n        val ( bxContenedorBtModulos, bxSuperior)= createRefs()\r\n\r\n        @Composable\r\n        fun btOpcionesModulos(text: String, icono: ImageVector, rutaPantalla: String?){\r\n            Button(\r\n                onClick = {\r\n                    CoroutineScope(Dispatchers.IO).launch {\r\n                        if (rutaPantalla!=null){\r\n                            estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)\r\n                            rutaPantallaModulo=rutaPantalla\r\n                            delay(1000)\r\n                            iniciarPantallaModulo=true\r\n                        }\r\n                    }\r\n                },\r\n                modifier = Modifier\r\n                    .height(objetoAdaptardor.ajustarAlturaCompact(90))\r\n                    .width(objetoAdaptardor.ajustarAnchoCompact(164)),\r\n                colors = ButtonDefaults.buttonColors(\r\n                    containerColor = Color.White, // Color de fondo del botón\r\n                    contentColor = Color(0xFF244BC0) // Color del contenido (texto e iconos)\r\n                ),\r\n                shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(8)), // Botón con esquinas redondeadas\r\n                elevation = ButtonDefaults.filledTonalButtonElevation(objetoAdaptardor.ajustarAlturaCompact(5))\r\n            )  {\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    Icon(\r\n                        imageVector = icono, // Cambia este ícono al que prefieras\r\n                        contentDescription = \"Icono del botón\",\r\n                        tint = Color(0xFF244BC0),\r\n                        modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(26))\r\n                    )\r\n                    Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(8))) // Espacio entre el ícono y el texto\r\n                    Text(\r\n                        text = text,\r\n                        fontFamily = aksharFont,\r\n                        fontWeight = FontWeight.Medium,\r\n                        color = Color(0xFF244BC0),\r\n                        fontSize = objetoAdaptardor.ajustarFont(15),\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(70))\r\n                .background(Color(0xFF244BC0))\r\n                .constrainAs(bxSuperior) {\r\n                    top.linkTo(parent.top, margin = 0.dp)\r\n                    start.linkTo(parent.start, margin = 0.dp)\r\n                },\r\n            contentAlignment = Alignment.BottomCenter\r\n        ){\r\n            Row (horizontalArrangement = Arrangement.Start,\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                modifier = Modifier.padding(bottom = objetoAdaptardor.ajustarAlturaCompact(6))\r\n            ){\r\n\r\n                Icon(\r\n                    imageVector = Icons.Default.AccountCircle,\r\n                    contentDescription = null,\r\n                    tint = Color.White,\r\n                    modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(60))\r\n                )\r\n                Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(8)))\r\n                Column {\r\n                    Text(text = nombreUsuario, color = Color.White,\r\n                        fontSize = objetoAdaptardor.ajustarFont(20),\r\n                        fontFamily = aksharFont, fontWeight = FontWeight.Light,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis,\r\n                        modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(150))\r\n                    )\r\n                    Text(text = \" $nombreEmpresa\", color = Color.White,\r\n                        fontSize = objetoAdaptardor.ajustarFont(15),\r\n                        fontFamily = aksharFont,\r\n                        fontWeight = FontWeight.Light,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis,\r\n                        modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(150))\r\n                    )\r\n                    Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(5)))\r\n                }\r\n                Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(20)))\r\n                Box(modifier = Modifier\r\n                    .height(objetoAdaptardor.ajustarAlturaCompact(60))\r\n                    .width(objetoAdaptardor.ajustarAnchoCompact(120)),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    SubcomposeAsyncImage(\r\n                        model = \"https://invefacon.com/img/$nombreEmpresa/$nombreEmpresa.png\",\r\n                        contentDescription = \"Logo empresa\",\r\n                        modifier = Modifier\r\n                            .fillMaxSize(),\r\n                        contentScale = ContentScale.Fit,\r\n                        loading = {\r\n                            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){\r\n                                CircularProgressIndicator(\r\n                                    color = Color.White,\r\n                                    modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(50))\r\n                                )\r\n                            }\r\n                        },\r\n                        error = { Image(\r\n                            modifier = Modifier\r\n                                .fillMaxSize(),\r\n                            painter = painterResource(id = R.drawable.logo_invenfacon),\r\n                            contentDescription = \"Descripción de la imagen\",\r\n                            contentScale = ContentScale.Fit\r\n                        ) }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        val lzycLadoDerecho = rememberLazyListState()\r\n        val lzycLadoIzquierdo = rememberLazyListState()\r\n\r\n\r\n        Box(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(objetoAdaptardor.ajustarAlturaCompact(640))\r\n            .constrainAs(bxContenedorBtModulos){\r\n                top.linkTo(bxSuperior.bottom)\r\n            },\r\n            contentAlignment = Alignment.Center){\r\n            Row {\r\n                Column {\r\n                    LazyColumn(\r\n                        state = lzycLadoIzquierdo,\r\n                        modifier = Modifier\r\n                            .height(objetoAdaptardor.ajustarAlturaCompact(640)),\r\n                        verticalArrangement = Arrangement.spacedBy(objetoAdaptardor.ajustarAlturaCompact(12))\r\n                    ) {\r\n                        item {  Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8))) }\r\n                        item { btOpcionesModulos(\"Facturación\", Icons.Default.Description, null) }\r\n                        item {  btOpcionesModulos(\"Ventas\", Icons.AutoMirrored.Filled.ShowChart, null) }\r\n                        item { btOpcionesModulos(\"Inventario\", Icons.Default.Inventory, null) }\r\n                        item { btOpcionesModulos(\"CxC\", Icons.Default.CreditCard, null) }\r\n                        item { btOpcionesModulos(\"Proveedores\", Icons.Filled.LocalShipping, null) }\r\n                        item { btOpcionesModulos(\"Usuarios\", Icons.Default.Person, null) }\r\n                    }\r\n                }\r\n                Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(14)))\r\n                Column {\r\n                    LazyColumn(\r\n                        state = lzycLadoDerecho,\r\n                        modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(640)),\r\n                        verticalArrangement = Arrangement.spacedBy(objetoAdaptardor.ajustarAlturaCompact(12))\r\n                    ) {\r\n                        item {  Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8))) }\r\n                        item { btOpcionesModulos(\"Proformas\", Icons.Default.Receipt, null) }\r\n                        item {  btOpcionesModulos(\"Clientes\", Icons.Default.People, RutasPantallasModulos.PantallaModuloClientes.ruta) }\r\n                        item { btOpcionesModulos(\"SAC\", Icons.Default.RestaurantMenu, null) }\r\n                        item { btOpcionesModulos(\"CxP\", Icons.Default.MonetizationOn, null) }\r\n                        item { btOpcionesModulos(\"Compras\", Icons.Default.ShoppingCart, null) }\r\n                        item { btOpcionesModulos(\"Resumen\", Icons.Default.Assessment, null) }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Preview(){\r\n    val systemUiController = rememberSystemUiController()\r\n    val estadoPantallaCarga = EstadoPantallaCarga()\r\n    InterfazInicio(null,null,\"\" ,\"\", systemUiController, estadoPantallaCarga)\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazInicio.kt b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazInicio.kt
--- a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazInicio.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazInicio.kt	(date 1733439035711)
@@ -83,7 +83,7 @@
     navControllerPrincipal: NavController,
     systemUiController: SystemUiController,
     estadoPantallaCarga: EstadoPantallaCarga,
-    estadoRespuestaApi : EstadoRespuestaApi
+    datosEstadoRespuestaApi : datosEstadoRespuestaApi
 ){
     val navControllerPantallasModulos= rememberNavController()
     Scaffold(
@@ -97,7 +97,7 @@
                 nombreEmpresa = nombreEmpresa,
                 systemUiController = systemUiController,
                 estadoPantallaCarga = estadoPantallaCarga,
-                estadoRespuestaApi= estadoRespuestaApi
+                datosEstadoRespuestaApi= datosEstadoRespuestaApi
             )
         }
     )
@@ -227,7 +227,7 @@
                 onClick = {
                     CoroutineScope(Dispatchers.IO).launch {
                         if (rutaPantalla!=null){
-                            estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)
+                            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
                             rutaPantallaModulo=rutaPantalla
                             delay(1000)
                             iniciarPantallaModulo=true
@@ -386,7 +386,8 @@
             }
         }
     }
-    estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
+    _estadoPantallaCarga.cambiarEstadoSoloVisualizacionPantallaCarga(false)
+    _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
 }
 
 @Preview(showBackground = true)
Index: app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/PantallaCarga.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.interfaces.compact.pantallas_principales\r\n\r\nimport androidx.compose.animation.animateColorAsState\r\nimport androidx.compose.animation.core.LinearEasing\r\nimport androidx.compose.animation.core.animateDpAsState\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentWidth\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.AccountCircle\r\nimport androidx.compose.material.icons.filled.CheckCircle\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonColors\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.window.DialogProperties\r\nimport androidx.lifecycle.ViewModel\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.soportereal.invefacon.R\r\nimport com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\n\r\n\r\n@Composable\r\nfun CustomBarView(\r\n    systemUiController: SystemUiController,\r\n    isCargando:Boolean,\r\n    estadoRespustaApi: Boolean? = null,\r\n    mensajeEstadoRespuestaApi: String\r\n) {\r\n    val aksharFont = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    var activeIndex by remember { mutableIntStateOf(0) }\r\n    systemUiController.setStatusBarColor(Color.Black.copy(alpha = 0.4f))\r\n\r\n    // Animación de las barras\r\n    LaunchedEffect(isCargando) {\r\n        while (isCargando) {\r\n            activeIndex = (activeIndex + 1) % 5\r\n            delay(200L)\r\n        }\r\n    }\r\n    if (isCargando){\r\n        // Fondo translúcido\r\n        Box(\r\n            modifier = Modifier\r\n                .statusBarsPadding()\r\n                .navigationBarsPadding()\r\n                .clickable(false, onClick = {})\r\n                .fillMaxSize()\r\n                .background(Color.Black.copy(alpha = 0.4f)),\r\n            contentAlignment = Alignment.Center\r\n        ) {\r\n\r\n            // Barras animadas\r\n            Row(\r\n                modifier = Modifier\r\n                    .wrapContentWidth()\r\n                    .height(70.dp),\r\n                horizontalArrangement = Arrangement.spacedBy(4.dp),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                for (index in 0 until 5) {\r\n                    BarItem(\r\n                        isActive = index == activeIndex,\r\n                        activeHeight = 60.dp,\r\n                        inactiveHeight = 20.dp,\r\n                        activeColor = Color(36, 75, 192),\r\n                        inactiveColor = Color(36, 75, 192).copy(alpha = 0.3f),\r\n                        systemUiController = systemUiController\r\n                    )\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if(!isCargando && estadoRespustaApi != null){\r\n        // Estado para controlar la visibilidad del diálogo\r\n        val showDialog = remember { mutableStateOf(estadoRespustaApi) }\r\n\r\n        // Mostrar el diálogo si es necesario\r\n        if (showDialog.value) {\r\n            AlertDialog(\r\n                modifier = Modifier.background(Color.White),\r\n                containerColor = Color.White,\r\n                onDismissRequest = { showDialog.value = false }, // Cerrar el diálogo sin acción\r\n                text = {\r\n                    Column(\r\n                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                        verticalArrangement = Arrangement.Center,\r\n                        modifier = Modifier.fillMaxWidth()\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = if(estadoRespustaApi==true) Icons.Default.CheckCircle else Icons.Filled.Error,\r\n                            tint = if(estadoRespustaApi==true) Color.Green else Color.Red,\r\n                            contentDescription = \"\"\r\n                        )\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(4)))\r\n                        Text(\r\n                            if(estadoRespustaApi==true) \"Éxito\" else \"Error\",\r\n                            fontFamily = aksharFont,\r\n                            fontWeight = FontWeight.Medium,\r\n                            color = Color.Black,\r\n                            fontSize = objetoAdaptardor.ajustarFont(22),\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(4)))\r\n                        Text(\r\n                            mensajeEstadoRespuestaApi,\r\n                            fontFamily = aksharFont,\r\n                            fontWeight = FontWeight.Medium,\r\n                            color = Color.Black,\r\n                            fontSize = objetoAdaptardor.ajustarFont(18),\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8)))\r\n                        Button(\r\n                            colors = ButtonDefaults.buttonColors(\r\n                                containerColor = Color(0xFF244BC0), // Color de fondo del botón\r\n                                contentColor = Color.White // Color del contenido (texto e iconos)\r\n                            ),\r\n                            onClick = {\r\n                                showDialog.value = false // Cerrar el diálog\r\n                            }\r\n                        ) {\r\n                            Text(\r\n                                \"Ok\",\r\n                                fontFamily = aksharFont,\r\n                                fontWeight = FontWeight.Medium,\r\n                                color = Color.White,\r\n                                fontSize = objetoAdaptardor.ajustarFont(17),\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis\r\n                            )\r\n                        }\r\n                    }\r\n                },\r\n                confirmButton = {\r\n                },\r\n                dismissButton = {\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Composable\r\nfun BarItem(\r\n    isActive: Boolean,\r\n    activeHeight: androidx.compose.ui.unit.Dp,\r\n    inactiveHeight: androidx.compose.ui.unit.Dp,\r\n    activeColor: Color,\r\n    inactiveColor: Color,\r\n    systemUiController: SystemUiController\r\n) {\r\n    systemUiController.setStatusBarColor(Color(0xFF244BC0))\r\n    val height by animateDpAsState(\r\n        targetValue = if (isActive) activeHeight else inactiveHeight,\r\n        animationSpec = tween(durationMillis = 500, easing = LinearEasing)\r\n    )\r\n\r\n    val color by animateColorAsState(\r\n        targetValue = if (isActive) activeColor else inactiveColor,\r\n        animationSpec = tween(durationMillis = 500, easing = LinearEasing)\r\n    )\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .width(12.dp)\r\n            .height(height)\r\n            .background(color = color, shape = RoundedCornerShape(4.dp))\r\n    )\r\n}\r\n\r\n\r\nclass EstadoPantallaCarga : ViewModel() {\r\n    private val _isCargandoPantallasMenuPrincipal = MutableStateFlow(false)\r\n    private val _isCargandoPantallasPrincipales= MutableStateFlow(false)\r\n\r\n    val isCargandoPantallasMenuPrincipal: StateFlow<Boolean> = _isCargandoPantallasMenuPrincipal\r\n    val isCargandoPantallaPrincipales: StateFlow<Boolean> = _isCargandoPantallasPrincipales\r\n\r\n    fun cambiarEstadoMenuPrincipal(cargando: Boolean) {\r\n        _isCargandoPantallasMenuPrincipal.value = cargando\r\n    }\r\n\r\n    fun cambiarEstadoPantallaPrincipal(cargando: Boolean){\r\n        _isCargandoPantallasPrincipales.value= cargando\r\n    }\r\n\r\n\r\n}\r\n\r\nclass EstadoRespuestaApi : ViewModel(){\r\n    private val _isRespuestaApiExitosa = MutableStateFlow(null)\r\n    private val _mensajeEstadoRespuesta = MutableStateFlow(\"\")\r\n\r\n    val isRespuestaApiExitosa: StateFlow<Boolean?> = _isRespuestaApiExitosa\r\n    val mensajeEstadoRespuesta : StateFlow<String> = _mensajeEstadoRespuesta\r\n\r\n    fun cambiarEstadoRespuestaApi(estadoRespuesta: Boolean?= null, mensajeEstadoRespuesta: String){\r\n        _isRespuestaApiExitosa.value= estadoRespuesta as Nothing?\r\n        _mensajeEstadoRespuesta.value= mensajeEstadoRespuesta\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/PantallaCarga.kt b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/PantallaCarga.kt
--- a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/PantallaCarga.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/PantallaCarga.kt	(date 1733439019248)
@@ -20,17 +20,16 @@
 import androidx.compose.foundation.layout.wrapContentWidth
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.AccountCircle
 import androidx.compose.material.icons.filled.CheckCircle
 import androidx.compose.material.icons.filled.Error
 import androidx.compose.material3.AlertDialog
 import androidx.compose.material3.Button
-import androidx.compose.material3.ButtonColors
 import androidx.compose.material3.ButtonDefaults
 import androidx.compose.material3.Icon
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableIntStateOf
 import androidx.compose.runtime.mutableStateOf
@@ -45,22 +44,20 @@
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.unit.dp
-import androidx.compose.ui.window.DialogProperties
 import androidx.lifecycle.ViewModel
+import androidx.navigation.NavController
 import com.google.accompanist.systemuicontroller.SystemUiController
 import com.soportereal.invefacon.R
 import com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact
 import kotlinx.coroutines.delay
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
+import org.json.JSONObject
 
 
 @Composable
 fun CustomBarView(
-    systemUiController: SystemUiController,
-    isCargando:Boolean,
-    estadoRespustaApi: Boolean? = null,
-    mensajeEstadoRespuestaApi: String
+    systemUiController: SystemUiController
 ) {
     val aksharFont = FontFamily(Font(R.font.akshar_medium))
     val configuration = LocalConfiguration.current
@@ -70,57 +67,75 @@
     val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)
     var activeIndex by remember { mutableIntStateOf(0) }
     systemUiController.setStatusBarColor(Color.Black.copy(alpha = 0.4f))
+    val isCargando by _estadoPantallaCarga.isCargandoPantallaPrincipales.collectAsState()
+    val estadoRespuestaApi by _datosEstadoRespuestaApi.isRespuestaApiExitosa.collectAsState()
+    val mensajeEstadoRespuestaApi by _datosEstadoRespuestaApi.mensajeEstadoRespuesta.collectAsState()
+    val datosRespuestaApi by _datosEstadoRespuestaApi.datosRespuestaApi.collectAsState()
+    val mostrarMensaje by _datosEstadoRespuestaApi.mostrarMensajeRespuesta.collectAsState()
+    val mostrarPantallaCarga by _estadoPantallaCarga.mostrarPantallaCarga.collectAsState()
+    val mostrarMensajeError by _datosEstadoRespuestaApi.mostrarSoloMensajeErrorApi.collectAsState()
 
-    // Animación de las barras
-    LaunchedEffect(isCargando) {
-        while (isCargando) {
-            activeIndex = (activeIndex + 1) % 5
-            delay(200L)
-        }
-    }
-    if (isCargando){
-        // Fondo translúcido
-        Box(
-            modifier = Modifier
-                .statusBarsPadding()
-                .navigationBarsPadding()
-                .clickable(false, onClick = {})
-                .fillMaxSize()
-                .background(Color.Black.copy(alpha = 0.4f)),
-            contentAlignment = Alignment.Center
-        ) {
-
-            // Barras animadas
-            Row(
-                modifier = Modifier
-                    .wrapContentWidth()
-                    .height(70.dp),
-                horizontalArrangement = Arrangement.spacedBy(4.dp),
-                verticalAlignment = Alignment.CenterVertically
-            ) {
-                for (index in 0 until 5) {
-                    BarItem(
-                        isActive = index == activeIndex,
-                        activeHeight = 60.dp,
-                        inactiveHeight = 20.dp,
-                        activeColor = Color(36, 75, 192),
-                        inactiveColor = Color(36, 75, 192).copy(alpha = 0.3f),
-                        systemUiController = systemUiController
-                    )
+
+    if (mostrarPantallaCarga){
+        // Animación de las barras
+        LaunchedEffect(isCargando) {
+            while (isCargando) {
+                activeIndex = (activeIndex + 1) % 5
+                delay(200L)
+            }
+        }
+        if (isCargando){
+            // Fondo translúcido
+            Box(
+                modifier = Modifier
+                    .statusBarsPadding()
+                    .navigationBarsPadding()
+                    .clickable(false, onClick = {})
+                    .fillMaxSize()
+                    .background(Color.Black.copy(alpha = 0.4f)),
+                contentAlignment = Alignment.Center
+            ) {
+                // Barras animadas
+                Row(
+                    modifier = Modifier
+                        .wrapContentWidth()
+                        .height(70.dp),
+                    horizontalArrangement = Arrangement.spacedBy(4.dp),
+                    verticalAlignment = Alignment.CenterVertically
+                ) {
+                    for (index in 0 until 5) {
+                        BarItem(
+                            isActive = index == activeIndex,
+                            activeHeight = 60.dp,
+                            inactiveHeight = 20.dp,
+                            activeColor = Color(36, 75, 192),
+                            inactiveColor = Color(36, 75, 192).copy(alpha = 0.3f),
+                            systemUiController = systemUiController
+                        )
+                    }
                 }
             }
-
         }
     }
 
+
+    if(datosRespuestaApi!=null){
+        _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
+        val codigoRespuestaApi= datosRespuestaApi?.getString("code")
+        val statusRespuestaApi= datosRespuestaApi?.getString("status")
+        val mensajeRespuestaApi= datosRespuestaApi?.getString("data")
+        _datosEstadoRespuestaApi.cambiarEstadoRespuestaApi(
+            estadoRespuesta = codigoRespuestaApi=="200" && statusRespuestaApi=="ok",
+            mensajeEstadoRespuesta = mensajeRespuestaApi?:""
+        )
+    }
 
 
-    if(!isCargando && estadoRespustaApi != null){
+    if(!isCargando && estadoRespuestaApi != null || mostrarMensaje || mostrarMensajeError){
         // Estado para controlar la visibilidad del diálogo
-        val showDialog = remember { mutableStateOf(estadoRespustaApi) }
-
+        val showDialog = remember { mutableStateOf(estadoRespuestaApi) }
         // Mostrar el diálogo si es necesario
-        if (showDialog.value) {
+        if (showDialog.value == true) {
             AlertDialog(
                 modifier = Modifier.background(Color.White),
                 containerColor = Color.White,
@@ -132,13 +147,13 @@
                         modifier = Modifier.fillMaxWidth()
                     ) {
                         Icon(
-                            imageVector = if(estadoRespustaApi==true) Icons.Default.CheckCircle else Icons.Filled.Error,
-                            tint = if(estadoRespustaApi==true) Color.Green else Color.Red,
+                            imageVector = if(estadoRespuestaApi==true) Icons.Default.CheckCircle else Icons.Filled.Error,
+                            tint = if(estadoRespuestaApi==true) Color.Green else Color.Red,
                             contentDescription = ""
                         )
                         Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(4)))
                         Text(
-                            if(estadoRespustaApi==true) "Éxito" else "Error",
+                            if(estadoRespuestaApi==true) "Éxito" else "Error",
                             fontFamily = aksharFont,
                             fontWeight = FontWeight.Medium,
                             color = Color.Black,
@@ -162,6 +177,7 @@
                             ),
                             onClick = {
                                 showDialog.value = false // Cerrar el diálog
+                                _datosEstadoRespuestaApi.cambiarEstadoRespuestaApi(regresarPantalla = true)
                             }
                         ) {
                             Text(
@@ -198,12 +214,12 @@
     systemUiController.setStatusBarColor(Color(0xFF244BC0))
     val height by animateDpAsState(
         targetValue = if (isActive) activeHeight else inactiveHeight,
-        animationSpec = tween(durationMillis = 500, easing = LinearEasing)
+        animationSpec = tween(durationMillis = 500, easing = LinearEasing), label = ""
     )
 
     val color by animateColorAsState(
         targetValue = if (isActive) activeColor else inactiveColor,
-        animationSpec = tween(durationMillis = 500, easing = LinearEasing)
+        animationSpec = tween(durationMillis = 500, easing = LinearEasing), label = ""
     )
 
     Box(
@@ -216,14 +232,22 @@
 
 
 class EstadoPantallaCarga : ViewModel() {
-    private val _isCargandoPantallasMenuPrincipal = MutableStateFlow(false)
-    private val _isCargandoPantallasPrincipales= MutableStateFlow(false)
+    private val _isCargandoPantallasPrincipales = MutableStateFlow(false)
+    private val _mostrarPantallaCarga = MutableStateFlow(false)
+    private val _mostrarSoloPantallaCarga = MutableStateFlow(false)
 
-    val isCargandoPantallasMenuPrincipal: StateFlow<Boolean> = _isCargandoPantallasMenuPrincipal
+
     val isCargandoPantallaPrincipales: StateFlow<Boolean> = _isCargandoPantallasPrincipales
+    val mostrarPantallaCarga: StateFlow<Boolean> = _mostrarPantallaCarga
+    val mostrarSoloPantallaCarga: StateFlow<Boolean> = _mostrarPantallaCarga
+
 
-    fun cambiarEstadoMenuPrincipal(cargando: Boolean) {
-        _isCargandoPantallasMenuPrincipal.value = cargando
+    fun cambiarEstadoVisualizacionPantallaCarga(mostrarPantalla: Boolean){
+        _mostrarPantallaCarga.value= mostrarPantalla
+    }
+
+    fun cambiarEstadoSoloVisualizacionPantallaCarga(mostrarPantalla: Boolean){
+        _mostrarSoloPantallaCarga.value= mostrarPantalla
     }
 
     fun cambiarEstadoPantallaPrincipal(cargando: Boolean){
@@ -232,16 +256,37 @@
 
 
 }
+val _estadoPantallaCarga= EstadoPantallaCarga()
 
-class EstadoRespuestaApi : ViewModel(){
-    private val _isRespuestaApiExitosa = MutableStateFlow(null)
+class datosEstadoRespuestaApi : ViewModel(){
+    private val _isRespuestaApiExitosa = MutableStateFlow<Boolean?>(null)
     private val _mensajeEstadoRespuesta = MutableStateFlow("")
+    private val _regresarPantallaAnterior = MutableStateFlow(false)
+    private val _datosRespuestaApi = MutableStateFlow<JSONObject?>(null)
+    private val _mostrarMensajeRespuesta = MutableStateFlow<Boolean>(false)
+    private val _mostrarSoloMensajeError = MutableStateFlow(false)
 
     val isRespuestaApiExitosa: StateFlow<Boolean?> = _isRespuestaApiExitosa
     val mensajeEstadoRespuesta : StateFlow<String> = _mensajeEstadoRespuesta
+    val regresarPantallaAnterior : StateFlow<Boolean> = _regresarPantallaAnterior
+    val datosRespuestaApi : StateFlow<JSONObject?> = _datosRespuestaApi
+    val mostrarMensajeRespuesta : StateFlow<Boolean> = _mostrarMensajeRespuesta
+    val mostrarSoloMensajeErrorApi : StateFlow<Boolean> = _mostrarSoloMensajeError
 
-    fun cambiarEstadoRespuestaApi(estadoRespuesta: Boolean?= null, mensajeEstadoRespuesta: String){
-        _isRespuestaApiExitosa.value= estadoRespuesta as Nothing?
+    fun cambiarEstadoRespuestaApi(
+        estadoRespuesta: Boolean?= null,
+        mensajeEstadoRespuesta: String="",
+        regresarPantalla: Boolean= false,
+        datosRespuesta: JSONObject? = null,
+        mostrarMensaje: Boolean= false,
+        mostrarSoloMensajeError: Boolean = false
+    ){
+        _isRespuestaApiExitosa.value= estadoRespuesta
         _mensajeEstadoRespuesta.value= mensajeEstadoRespuesta
+        _regresarPantallaAnterior.value = regresarPantalla
+        _datosRespuestaApi.value = datosRespuesta
+        _mostrarMensajeRespuesta.value = mostrarMensaje
+        _mostrarSoloMensajeError.value= mostrarSoloMensajeError
     }
-}
\ No newline at end of file
+}
+val _datosEstadoRespuestaApi= datosEstadoRespuestaApi()
\ No newline at end of file
Index: app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazAgregarCliente.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.interfaces.compact.modulos.clientes\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.AccountCircle\r\nimport androidx.compose.material.icons.filled.Assessment\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material.icons.filled.MonetizationOn\r\nimport androidx.compose.material.icons.filled.PermIdentity\r\nimport androidx.compose.material.icons.filled.PersonAdd\r\nimport androidx.compose.material.icons.filled.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.Snackbar\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateMapOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.runtime.snapshots.SnapshotStateMap\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.navigation.NavController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\nimport com.soportereal.invefacon.R\r\nimport com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\n\r\n@Composable\r\nfun IniciarInterfazAgregarCliente(\r\n    navController: NavController?,\r\n    token: String,\r\n    estadoPantallaCarga: EstadoPantallaCarga?\r\n){\r\n    val systemUiController = rememberSystemUiController()\r\n    systemUiController.setStatusBarColor(Color(0xFF244BC0))\r\n    systemUiController.setNavigationBarColor(Color.Black)\r\n    val fontAksharPrincipal = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    val lazyState= rememberLazyListState()\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var errorResultadoApi by remember { mutableStateOf<Boolean?>(null) }\r\n    val iconoSnht= if(errorResultadoApi==true) Icons.Filled.Error else Icons.Filled.Check\r\n    val colorIconoSnht= if (errorResultadoApi==true) Color.Red else Color.Green\r\n    var snackbarVisible by remember { mutableStateOf(false) }\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val objectoProcesadorDatosApi= ProcesarDatosModuloClientes(token)\r\n    var isCosultaDatasFinalizada by remember { mutableIntStateOf(0) }\r\n    val opcionesTipoCliente: SnapshotStateMap<String, String> = remember { mutableStateMapOf() }\r\n    var codigoTipoClienteSeleccionado by remember { mutableStateOf(\"\") }\r\n    val opcionesAgentesVentasClienteActivos: SnapshotStateMap<String, String> = remember { mutableStateMapOf() }\r\n    var codigoAgenteVentasSeleccionado by remember { mutableStateOf(\"\") }\r\n    var opciontieneCreditoSeleccionada by remember { mutableStateOf(\"\") }\r\n    var opcionExentoSeleccionada by remember { mutableStateOf(\"\") }\r\n    var opcionExoneradoSeleccionada by remember { mutableStateOf(\"\") }\r\n    var opcionNoForzaCreditoSeleccionada by remember { mutableStateOf(\"\") }\r\n    var guardarCliente by remember { mutableStateOf(false) }\r\n\r\n\r\n    val opcionesEstadoCliente= remember {\r\n        mutableStateMapOf(\r\n            \"1\" to \"Activo\",\r\n            \"2\" to \"Suspendido\",\r\n            \"3\" to \"Eliminado\"\r\n        )\r\n    }\r\n\r\n    val opcionesLogicasCliente= remember {\r\n        mutableStateMapOf(\r\n            \"0\" to \"No\",\r\n            \"1\" to \"Sí\"\r\n        )\r\n    }\r\n\r\n    val opcionesTipoPrecioCliente= remember {\r\n        mutableStateMapOf<String, String>().apply {\r\n            for (i in 1..10){\r\n                put(\"$i\", \"$i\")\r\n            }\r\n        }\r\n    }\r\n\r\n    val opcionesTipoMoneda= remember {\r\n        mutableStateMapOf(\r\n            \"CRC\" to \"₡-Colones\",\r\n            \"USD\" to \"$-Dolares\",\r\n            \"EUR\" to \"€-Euros\"\r\n        )\r\n    }\r\n    var tipoMonedaSeleccionada by remember { mutableStateOf(\"CRC\") }\r\n    var codigoTipoIdentificacionClienteSeleccionada by remember { mutableStateOf(\"\") }\r\n\r\n    val opcionesTipoIndentificacionCliente= remember {\r\n        mutableStateMapOf(\r\n            \"00\" to \"No definido\",\r\n            \"01\" to \"Física\",\r\n            \"02\" to \"Jurídica\",\r\n            \"03\" to \"Dimex\",\r\n            \"04\" to \"Nite\"\r\n        )\r\n    }\r\n\r\n    var tipoCedula by remember { mutableStateOf(\"\") }\r\n    var cedulaCliente by remember { mutableStateOf(\"\") }\r\n    var nombreJuridico by remember { mutableStateOf(\"\") }\r\n    var nombreComercial by remember { mutableStateOf(\"\") }\r\n    var fechaNacimiento by remember { mutableStateOf(\"\") }\r\n\r\n    //Informacion Contacto\r\n    var direccion by remember { mutableStateOf(\"\") }\r\n    var telefono by remember { mutableStateOf(\"\") }\r\n    var emailGeneral by remember { mutableStateOf(\"\") }\r\n    var emailFactura by remember { mutableStateOf(\"\") }\r\n    var emailCobros by remember { mutableStateOf(\"\") }\r\n    var contacto by remember { mutableStateOf(\"\") }\r\n\r\n    //Informacion Financiera\r\n    var creditoMonto by remember { mutableStateOf(\"\") }\r\n    var creditoPlazo by remember { mutableStateOf(\"\") }\r\n    var diaCobro by remember { mutableStateOf(\"\") }\r\n    var clienteTipo by remember { mutableStateOf(\"\") }\r\n    var monedaCliente by remember { mutableStateOf(\"\") }\r\n    var descuentoCliente by remember { mutableStateOf(\"\") }\r\n    var montoContrato by remember { mutableStateOf(\"\") }\r\n    var detalleContrato by remember { mutableStateOf(\"\") }\r\n\r\n    // Informacion de ventas\r\n    var ultimaVenta by remember { mutableStateOf(\"\") }\r\n    var agenteVentas by remember { mutableStateOf(\"\") }\r\n    var tipoPrecio by remember { mutableStateOf(\"\") }\r\n    var estadoCliente by remember { mutableStateOf(\"\") }\r\n    var tieneCredito by remember { mutableStateOf(\"\") }\r\n    var noForzarCredito by remember { mutableStateOf(\"\") }\r\n    var exento by remember { mutableStateOf(\"\") }\r\n    var exonerado by remember { mutableStateOf(\"\") }\r\n    var zonaCliente by remember { mutableStateOf(\"\") }\r\n\r\n\r\n    LaunchedEffect(snackbarHostState) {\r\n        snackbarHostState.currentSnackbarData?.dismiss()\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        val result= objectoProcesadorDatosApi.obtenerDatosAgentes()\r\n        //validar si la respuesta de la api fue exitosa\r\n        if (result==null){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: revise su conexión a Internet\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n        }\r\n        else if (result.getInt(\"code\")==921){\r\n            println(\"hola\")\r\n\r\n        }\r\n        else if (result.getString(\"status\")==\"error\"){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: ${result.getString(\"data\")}\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n\r\n        }\r\n        else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n            val resultado= result.getJSONObject(\"resultado\")\r\n            val datos= resultado.getJSONArray(\"data\")\r\n            for (i in 0 until datos.length()) {\r\n                val datosAgente= datos.getJSONObject(i)\r\n                opcionesAgentesVentasClienteActivos[datosAgente.getString(\"Cod_Usuario\")]= datosAgente.getString(\"Nombre\")\r\n\r\n\r\n            }\r\n        }\r\n        isCosultaDatasFinalizada++\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        val result= objectoProcesadorDatosApi.obtenerTiposClientes()\r\n        //validar si la respuesta de la api fue exitosa\r\n        if (result==null){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: revise su conexión a Internet\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n        }\r\n        else if (result.getInt(\"code\")==921){\r\n            println(\"hola\")\r\n\r\n        }\r\n        else if (result.getString(\"status\")==\"error\"){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: ${result.getString(\"data\")}\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n        }\r\n        else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n            val resultado= result.getJSONObject(\"resultado\")\r\n            val datos= resultado.getJSONArray(\"data\")\r\n            for (i in 0 until datos.length()) {\r\n                val datosTipoCliente= datos.getJSONObject(i)\r\n                opcionesTipoCliente[datosTipoCliente.getString(\"Cod_Tipo_Cliente\")]= datosTipoCliente.getString(\"Descripcion\")\r\n            }\r\n        }\r\n        isCosultaDatasFinalizada++\r\n    }\r\n\r\n    LaunchedEffect(isCosultaDatasFinalizada) {\r\n        if (isCosultaDatasFinalizada==2){\r\n            delay(500)\r\n            estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)\r\n            isCosultaDatasFinalizada= 0\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(guardarCliente) {\r\n        if(guardarCliente){\r\n            estadoPantallaCarga?.cambiarEstadoMenuPrincipal(true)\r\n            val datosCliente = Cliente(\r\n                Nombre = nombreJuridico,\r\n                Telefonos = telefono,\r\n                Direccion = direccion,\r\n                TipoPrecioVenta = tipoPrecio,\r\n                Cod_Tipo_Cliente = codigoTipoClienteSeleccionado,\r\n                Email = emailGeneral,\r\n                DiaCobro = diaCobro,\r\n                Contacto = contacto,\r\n                Exento = opcionExentoSeleccionada,\r\n                AgenteVentas = agenteVentas,\r\n                Cod_Zona = zonaCliente,\r\n                DetalleContrato = detalleContrato,\r\n                MontoContrato = montoContrato,\r\n                Descuento = descuentoCliente,\r\n                MontoCredito = creditoMonto,\r\n                plazo =creditoPlazo,\r\n                TieneCredito = opciontieneCreditoSeleccionada,\r\n                FechaNacimiento = fechaNacimiento,\r\n                Cod_Moneda = monedaCliente,\r\n                TipoIdentificacion = codigoTipoIdentificacionClienteSeleccionada,\r\n                ClienteNombreComercial = nombreComercial,\r\n                EmailFactura = emailFactura,\r\n                EmailCobro = emailCobros,\r\n                exonerado = opcionExoneradoSeleccionada,\r\n                noForzaCredito = opcionNoForzaCreditoSeleccionada,\r\n                opcionesLogicasCliente = opcionesLogicasCliente,\r\n                opcionesEstadoCliente = opcionesEstadoCliente,\r\n                opcionesTipoCliente = opcionesTipoCliente,\r\n                opcionesAgentesVentas = opcionesAgentesVentasClienteActivos,\r\n                opcionesTipoIndetificacionCliente = opcionesTipoIndentificacionCliente\r\n            )\r\n\r\n            val result= objectoProcesadorDatosApi.agregarCliente(datosCliente = datosCliente)\r\n\r\n            //validar si la respuesta de la api fue exitosa\r\n            if (result==null){\r\n                estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)\r\n                if (!snackbarVisible) {\r\n                    errorResultadoApi=true\r\n                    coroutineScope.launch {\r\n                        snackbarVisible=true\r\n                        snackbarHostState.showSnackbar(\r\n                            message = \"Error: revise su conexión a Internet\"\r\n                        )\r\n                        snackbarHostState.currentSnackbarData?.dismiss()\r\n                        snackbarVisible=false\r\n                    }\r\n                }\r\n            }\r\n\r\n            else if (result.getInt(\"code\")==921){\r\n                println(\"hola\")\r\n\r\n            }\r\n\r\n            else if (result.getString(\"status\")==\"error\"){\r\n                estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)\r\n                if (!snackbarVisible) {\r\n                    errorResultadoApi=true\r\n                    coroutineScope.launch {\r\n                        snackbarVisible=true\r\n                        snackbarHostState.showSnackbar(\r\n                            message = \"Error: ${result.getString(\"data\")}\"\r\n                        )\r\n                        snackbarHostState.currentSnackbarData?.dismiss()\r\n                        snackbarVisible=false\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n                estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)\r\n                if (!snackbarVisible) {\r\n                    errorResultadoApi=false\r\n                    coroutineScope.launch {\r\n                        snackbarVisible=true\r\n                        snackbarHostState.showSnackbar(\r\n                            message = \"Exito: ${result.getString(\"data\")}\"\r\n                        )\r\n                        snackbarHostState.currentSnackbarData?.dismiss()\r\n                        snackbarVisible=false\r\n                        navController?.popBackStack()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        guardarCliente=false\r\n    }\r\n\r\n    ConstraintLayout(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(objetoAdaptardor.ajustarAlturaCompact(722))\r\n            .background(Color(0xFFFFFFFF))\r\n            .statusBarsPadding()\r\n            .navigationBarsPadding()\r\n    ) {\r\n        val (bxSuperior, bxContenedorLzColum,snhtMensajesSuperiores)= createRefs()\r\n        //Box superior Informacion Cliente\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(70))\r\n                .background(Color(0xFF244BC0))\r\n                .constrainAs(bxSuperior) {\r\n                    top.linkTo(parent.top)\r\n                    start.linkTo(parent.start)\r\n                },\r\n            contentAlignment = Alignment.BottomCenter\r\n        ){\r\n            Row (horizontalArrangement = Arrangement.Start,\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                modifier = Modifier.padding(bottom = objetoAdaptardor.ajustarAlturaCompact(6))\r\n            ){\r\n                Icon(\r\n                    imageVector = Icons.Filled.PersonAdd,\r\n                    contentDescription =\"Icono Clientes\",\r\n                    tint = Color.White,\r\n                    modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(45))\r\n                )\r\n                Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(8)))\r\n                Text(\r\n                    \"Agregar Cliente\",\r\n                    fontFamily = fontAksharPrincipal,\r\n                    fontWeight =    FontWeight.SemiBold,\r\n                    fontSize = objetoAdaptardor.ajustarFont(35),\r\n                    color = Color.White,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis,\r\n                    textAlign = TextAlign.Center,\r\n                    modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(45))\r\n                )\r\n            }\r\n        }\r\n        //Box contenedor Lazy Column\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(652))\r\n                .background(Color.White)\r\n                .constrainAs(bxContenedorLzColum){\r\n                    start.linkTo(parent.start)\r\n                    top.linkTo(bxSuperior.bottom)\r\n                },\r\n            contentAlignment = Alignment.TopCenter\r\n        ){\r\n            LazyColumn(\r\n                modifier = Modifier.fillMaxSize(),\r\n                verticalArrangement = Arrangement.spacedBy(objetoAdaptardor.ajustarAlturaCompact(12)),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                state = lazyState\r\n            ) {\r\n                item { Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(4))) }\r\n                item {\r\n                    Column {\r\n\r\n                        AgregarContenedorDatosClientes(\r\n                            objetoAdaptardor = objetoAdaptardor,\r\n                            titulo = \"Datos del cliente\",\r\n                            fontAksharPrincipal = fontAksharPrincipal,\r\n                            icono = Icons.Filled.AccountCircle\r\n                        ) {\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Nombre comercial\",\r\n                                valor = nombreComercial,\r\n                                nuevoValor = {nombreComercial= it}\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Nombre jurídico\",\r\n                                valor = nombreJuridico,\r\n                                nuevoValor = {nombreJuridico= it}\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Tipo cédula\",\r\n                                valor = opcionesTipoIndentificacionCliente[tipoCedula]?: \"Sin definir\",\r\n                                nuevoValor = {\r\n                                    tipoCedula= it\r\n                                    codigoTipoIdentificacionClienteSeleccionada=it\r\n                                },\r\n                                contieneOpciones = true,\r\n                                opciones = opcionesTipoIndentificacionCliente\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Cédula\",\r\n                                valor = cedulaCliente,\r\n                                nuevoValor = {cedulaCliente= it},\r\n                                soloPermitirVoloresNumericos = true\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Fecha nacimiento\",\r\n                                valor = fechaNacimiento,\r\n                                nuevoValor = {fechaNacimiento= it},\r\n                                isUltimo = true,\r\n                                contieneOpciones = true,\r\n                                isSeleccionarFecha = true\r\n                            )\r\n                        }\r\n\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                        AgregarContenedorDatosClientes(\r\n                            objetoAdaptardor = objetoAdaptardor,\r\n                            fontAksharPrincipal = fontAksharPrincipal,\r\n                            titulo = \"Información de contacto\",\r\n                            icono = Icons.Filled.Phone\r\n                        ){\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Teléfonos\",\r\n                                valor = telefono,\r\n                                nuevoValor = {telefono= it},\r\n                                soloPermitirVoloresNumericos = true,\r\n                                permitirComas = true,\r\n                                cantidadLineas = 1\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Email general\",\r\n                                valor = emailGeneral,\r\n                                nuevoValor = {emailGeneral= it},\r\n                                cantidadLineas = 1\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Email factura\",\r\n                                valor = emailFactura,\r\n                                nuevoValor = {emailFactura= it},\r\n                                cantidadLineas = 1\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Email cobros\",\r\n                                valor = emailCobros,\r\n                                nuevoValor = {emailCobros= it},\r\n                                cantidadLineas = 1\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Contacto\",\r\n                                valor = contacto,\r\n                                nuevoValor = {contacto= it}\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Dirección\",\r\n                                valor = direccion,\r\n                                nuevoValor = {direccion= it},\r\n                                isUltimo = true\r\n                            )\r\n                        }\r\n\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                        AgregarContenedorDatosClientes(\r\n                            objetoAdaptardor = objetoAdaptardor,\r\n                            fontAksharPrincipal = fontAksharPrincipal,\r\n                            titulo = \"Información financiera\",\r\n                            icono = Icons.Filled.MonetizationOn\r\n                        ){\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Monto de crédito\",\r\n                                valor = creditoMonto,\r\n                                nuevoValor = {creditoMonto= it},\r\n                                darFormatoMiles = true,\r\n                                soloPermitirVoloresNumericos = true,\r\n                                cantidadLineas = 1\r\n                            )\r\n\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Plazo de crédito\",\r\n                                valor = creditoPlazo,\r\n                                nuevoValor = {creditoPlazo= it},\r\n                                soloPermitirVoloresNumericos = true,\r\n                                cantidadLineas = 1\r\n                            )\r\n\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Día de cobro\",\r\n                                valor = diaCobro,\r\n                                nuevoValor = {diaCobro= it},\r\n                                soloPermitirVoloresNumericos = true,\r\n                                cantidadLineas = 1\r\n                            )\r\n\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Tipo de cliente\",\r\n                                valor = opcionesTipoCliente[clienteTipo]?:\"Sin definir\",\r\n                                nuevoValor = {\r\n                                    clienteTipo= it\r\n                                    codigoTipoClienteSeleccionado=it\r\n                                },\r\n                                contieneOpciones = true,\r\n                                opciones = opcionesTipoCliente\r\n                            )\r\n\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Moneda\",\r\n                                valor = opcionesTipoMoneda[monedaCliente]?:\"CRC\",\r\n                                nuevoValor = {monedaCliente= it},\r\n                                contieneOpciones = true,\r\n                                opciones = opcionesTipoMoneda\r\n                            )\r\n\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Descuento\",\r\n                                valor = descuentoCliente,\r\n                                nuevoValor = {descuentoCliente= it},\r\n                                soloPermitirVoloresNumericos = true,\r\n                                cantidadLineas = 1\r\n                            )\r\n\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Monto de contrato\",\r\n                                valor = montoContrato,\r\n                                nuevoValor = {montoContrato= it},\r\n                                darFormatoMiles = true,\r\n                                soloPermitirVoloresNumericos = true,\r\n                                cantidadLineas = 1\r\n                            )\r\n\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Detalle de contrato\",\r\n                                valor = detalleContrato,\r\n                                nuevoValor = {detalleContrato= it},\r\n                                isUltimo = true\r\n                            )\r\n                        }\r\n\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                        AgregarContenedorDatosClientes(\r\n                            objetoAdaptardor = objetoAdaptardor,\r\n                            fontAksharPrincipal = fontAksharPrincipal,\r\n                            titulo = \"Información de ventas\",\r\n                            icono = Icons.Default.Assessment\r\n                        ){\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Agente de ventas\",\r\n                                valor = opcionesAgentesVentasClienteActivos[agenteVentas]?:\"Sin definir\",\r\n                                nuevoValor = {\r\n                                    agenteVentas= it\r\n                                    codigoAgenteVentasSeleccionado=it\r\n                                },\r\n                                contieneOpciones = true,\r\n                                opciones = opcionesAgentesVentasClienteActivos\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Tipo de precio\",\r\n                                valor = opcionesTipoPrecioCliente[tipoPrecio]?:\"Sin definir\",\r\n                                nuevoValor = {tipoPrecio= it},\r\n                                contieneOpciones = true,\r\n                                opciones = opcionesTipoPrecioCliente\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Tiene crédito\",\r\n                                valor = opcionesLogicasCliente[tieneCredito]?:\"Sin definir\",\r\n                                nuevoValor = {\r\n                                    tieneCredito= it\r\n                                    opciontieneCreditoSeleccionada=it\r\n                                },\r\n                                contieneOpciones = true,\r\n                                opciones = opcionesLogicasCliente\r\n                            )\r\n                            AgregarTextFieldDatosClientes(\r\n                                label = \"Exento\",\r\n                                valor = opcionesLogicasCliente[exento]?:\"Sin definir\",\r\n                                nuevoValor = {\r\n                                    exento= it\r\n                                    opcionExentoSeleccionada=it\r\n                                },\r\n                                contieneOpciones = true,\r\n                                opciones = opcionesLogicasCliente\r\n                            )\r\n                        }\r\n\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                        //Box Contenerdor boton guardar\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .width(objetoAdaptardor.ajustarAnchoCompact(360))\r\n                                .background(Color.Transparent)\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(50)),\r\n                            contentAlignment = Alignment.Center\r\n                        ){\r\n                            Button(modifier = Modifier\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(45)),\r\n                                onClick = {\r\n                                    guardarCliente=true\r\n                                },\r\n                                colors = ButtonDefaults.buttonColors(\r\n                                    containerColor = Color.Transparent, // Color de fondo del botón\r\n                                    contentColor = Color(0xFF244BC0)\r\n                                )\r\n                            ){\r\n                                Row {\r\n                                    Text(\r\n                                        text = \"Guardar\",\r\n                                        maxLines = 1,\r\n                                        fontFamily = fontAksharPrincipal,\r\n                                        fontWeight = FontWeight.SemiBold,\r\n                                        fontSize = objetoAdaptardor.ajustarFont(25)\r\n                                    )\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // Snackbar inferior para mostrar mensajes emergentes para el usuario como:\r\n        // - Problemas de Red\r\n        // - Contraseñas Incorrectas\r\n        // - Correos incorrectos o no encontrados\r\n        SnackbarHost(\r\n            hostState = snackbarHostState,\r\n            snackbar = { snackbarData ->\r\n                Snackbar(\r\n                    containerColor = Color.White, // Color de fondo del Snackbar\r\n                    contentColor = Color.DarkGray // Color del texto del Snackbar\r\n\r\n                ) {\r\n                    Row(\r\n                        modifier = Modifier.padding(objetoAdaptardor.ajustarAlturaCompact(8)),// Añadir algo de padding para espaciado\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = iconoSnht,\r\n                            contentDescription = \"Icono de error\",\r\n                            tint = colorIconoSnht, // Cambiar el color del ícono si deseas\r\n                            modifier = Modifier.padding(end = objetoAdaptardor.ajustarAnchoCompact(8)).size(objetoAdaptardor.ajustarAlturaCompact(35)) // Espacio entre ícono y texto\r\n                        )\r\n                        Text(\r\n                            text = snackbarData.visuals.message,\r\n                            style = TextStyle(\r\n                                color = Color.Black,\r\n                                fontSize = objetoAdaptardor.ajustarFont(15),\r\n                                fontWeight = FontWeight.Light,\r\n                                fontFamily = fontAksharPrincipal\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .constrainAs(snhtMensajesSuperiores) {\r\n                    top.linkTo(bxSuperior.bottom, margin = objetoAdaptardor.ajustarAlturaCompact(12))\r\n                    start.linkTo(parent.start)\r\n                }\r\n        )\r\n    }\r\n\r\n}\r\n\r\n@Composable\r\n@Preview(showBackground = true)\r\nprivate fun Preview(){\r\n    IniciarInterfazAgregarCliente(null, \"\", null)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazAgregarCliente.kt b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazAgregarCliente.kt
--- a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazAgregarCliente.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazAgregarCliente.kt	(date 1733437198313)
@@ -59,6 +59,7 @@
 import com.soportereal.invefacon.R
 import com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga
+import com.soportereal.invefacon.interfaces.compact.pantallas_principales._estadoPantallaCarga
 import kotlinx.coroutines.delay
 import kotlinx.coroutines.launch
 
@@ -274,14 +275,14 @@
     LaunchedEffect(isCosultaDatasFinalizada) {
         if (isCosultaDatasFinalizada==2){
             delay(500)
-            estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)
+            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
             isCosultaDatasFinalizada= 0
         }
     }
 
     LaunchedEffect(guardarCliente) {
         if(guardarCliente){
-            estadoPantallaCarga?.cambiarEstadoMenuPrincipal(true)
+            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
             val datosCliente = Cliente(
                 Nombre = nombreJuridico,
                 Telefonos = telefono,
@@ -319,7 +320,7 @@
 
             //validar si la respuesta de la api fue exitosa
             if (result==null){
-                estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)
+                _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
                 if (!snackbarVisible) {
                     errorResultadoApi=true
                     coroutineScope.launch {
@@ -339,7 +340,7 @@
             }
 
             else if (result.getString("status")=="error"){
-                estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)
+                _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
                 if (!snackbarVisible) {
                     errorResultadoApi=true
                     coroutineScope.launch {
@@ -355,7 +356,7 @@
             }
 
             else if(result.getString("status")=="ok" && result.getString("code")=="200"){
-                estadoPantallaCarga?.cambiarEstadoMenuPrincipal(false)
+                _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
                 if (!snackbarVisible) {
                     errorResultadoApi=false
                     coroutineScope.launch {
Index: app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazModuloClientes.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.interfaces.compact.modulos.clientes\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material.icons.filled.MoreHoriz\r\nimport androidx.compose.material.icons.filled.People\r\nimport androidx.compose.material.icons.filled.PersonAdd\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.filled.Tune\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Snackbar\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.runtime.snapshotFlow\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\nimport com.soportereal.invefacon.R\r\nimport com.soportereal.invefacon.funciones_de_interfaces.NavHostPantallasModuloClientes\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasModuloClientes\r\nimport com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact\r\nimport com.soportereal.invefacon.interfaces.compact.inicio_sesion.ocultarTeclado\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoRespuestaApi\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport java.text.Normalizer\r\n\r\n\r\n@Composable\r\ninternal fun IniciarInterfazModuloClientes(\r\n    apiToken: String,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga,\r\n    estadoRespuestaApi: EstadoRespuestaApi\r\n) {\r\n\r\n    val navControllerPantallasModuloCliente= rememberNavController()\r\n\r\n    Scaffold (\r\n        content = {innerPadding ->\r\n            NavHostPantallasModuloClientes(\r\n                apiToken =  apiToken,\r\n                navControlerPantallasModuloClientes = navControllerPantallasModuloCliente,\r\n                innerPadding= innerPadding,\r\n                systemUiController= systemUiController,\r\n                estadoPantallaCarga= estadoPantallaCarga,\r\n                estadoRespuestaApi= estadoRespuestaApi\r\n            )\r\n        }\r\n    )\r\n}\r\n\r\n\r\n@Composable\r\nfun InterfazModuloClientes(\r\n    apiToken: String,\r\n    navControllerPantallasModuloClientes: NavController,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga,\r\n    estadoRespuestaApi: EstadoRespuestaApi\r\n){\r\n    systemUiController.setStatusBarColor(Color(0xFF244BC0))\r\n    systemUiController.setNavigationBarColor(Color.Black)\r\n    val fontAksharPrincipal = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    var datosIngresadosBarraBusqueda by rememberSaveable  { mutableStateOf(\"\") }\r\n    val objectoProcesadorDatosApi= ProcesarDatosModuloClientes(apiToken)\r\n    var apiConsultaActual by remember { mutableStateOf<Job?>(null) }\r\n    val cortinaConsultaApi= CoroutineScope(Dispatchers.IO)\r\n    var listaClientesActuales by remember { mutableStateOf<List<Cliente>>(emptyList()) }\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    var snackbarVisible by remember { mutableStateOf(false) }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var errorResultadoApi by remember { mutableStateOf<Boolean?>(false) }\r\n    val iconoSnht= if(errorResultadoApi==true) Icons.Filled.Error else Icons.Filled.Check\r\n    val colorIconoSnht= if (errorResultadoApi==true) Color.Red else Color.Green\r\n    var isCargandoClientes by remember { mutableStateOf(true) }\r\n    val lazyState= rememberLazyListState()\r\n    var paginaActualLazyColumn by remember { mutableIntStateOf(1) }\r\n    var ultimaPaginaLazyColumn by remember { mutableIntStateOf(1) }\r\n    var iniciarCargaDatos by remember { mutableStateOf(false) }\r\n    var isDialogOpen by remember { mutableStateOf(false) }\r\n    // Estados para las selecciones de los menús\r\n    var opcionFiltroPor by remember { mutableStateOf(\"Busqueda Mixta\") }\r\n    var opcionFiltroEstado by remember {mutableStateOf(\"Activos y Suspendidos\")}\r\n    var opcionFiltroZona by remember { mutableStateOf(\"Null\")}\r\n    var opcionFiltroAgenteVenta by remember { mutableStateOf(\"Null\") }\r\n    var opcionFiltroTipo by remember { mutableStateOf(\"Null\") }\r\n    val contexto = LocalContext.current\r\n    var iniciarPantallaAgregarClente by remember { mutableStateOf(false) }\r\n\r\n    LaunchedEffect(snackbarHostState) {\r\n        snackbarHostState.currentSnackbarData?.dismiss()\r\n    }\r\n\r\n    LaunchedEffect(iniciarPantallaAgregarClente) {\r\n        if (iniciarPantallaAgregarClente){\r\n            estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)\r\n            navControllerPantallasModuloClientes.navigate(RutasPantallasModuloClientes.PantallaAgregarCliente.ruta){\r\n                restoreState= true\r\n                launchSingleTop=true\r\n            }\r\n        }\r\n    }\r\n\r\n    ConstraintLayout(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(objetoAdaptardor.ajustarAlturaCompact(622))\r\n            .background(Color(0xFFFFFFFF))\r\n            .statusBarsPadding()\r\n            .navigationBarsPadding()\r\n    ){\r\n        val (bxSuperior, txfBarraBusqueda, bxOpcionAgregarCliente, bxContenedorDatosClientes, snhtMensajesSuperiores)= createRefs()\r\n\r\n        fun buscarClientes(){\r\n            isCargandoClientes=true\r\n            apiConsultaActual?.cancel()\r\n            apiConsultaActual= cortinaConsultaApi.launch{\r\n                delay(500)\r\n                val result= objectoProcesadorDatosApi.obtenerDatosClientes(\r\n                    clientesPorPagina = \"5\",\r\n                    paginaCliente = paginaActualLazyColumn.toString(),\r\n                    clienteDatoBusqueda = datosIngresadosBarraBusqueda.trim(),\r\n                    clienteEstado = when(opcionFiltroEstado){\r\n                        \"Activo\"->\"1\"\r\n                        \"Suspendido\"->\"2\"\r\n                        \"Eliminado\"->\"3\"\r\n                        \"Activos y Suspendidos\"->\"4\"\r\n                        else->\"\"\r\n                    },\r\n                    busquedaPor = quitarTildesYMinusculas(opcionFiltroPor)\r\n\r\n                )\r\n                //validar si la respuesta de la api fue exitosa\r\n                if (result==null){\r\n                    if (!snackbarVisible) {\r\n                        errorResultadoApi=true\r\n                        coroutineScope.launch {\r\n                            snackbarVisible=true\r\n                            snackbarHostState.showSnackbar(\r\n                                message = \"Error: revise su conexión a Internet\"\r\n                            )\r\n                            snackbarHostState.currentSnackbarData?.dismiss()\r\n                            snackbarVisible=false\r\n                            isCargandoClientes=false\r\n                        }\r\n                    }\r\n                }\r\n                else if (result.getInt(\"code\")==921){\r\n                    println(\"hola\")\r\n\r\n                }\r\n                else if (result.getString(\"status\")==\"error\"){\r\n                    if (!snackbarVisible) {\r\n                        errorResultadoApi=true\r\n                        coroutineScope.launch {\r\n                            snackbarVisible=true\r\n                            snackbarHostState.showSnackbar(\r\n                                message = \"Error: ${result.getString(\"data\")}\"\r\n                            )\r\n                            snackbarHostState.currentSnackbarData?.dismiss()\r\n                            snackbarVisible=false\r\n                            isCargandoClientes=false\r\n                        }\r\n                    }\r\n\r\n                }\r\n                else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n                    val resultado= result.getJSONObject(\"resultado\")\r\n                    ultimaPaginaLazyColumn= resultado.getInt(\"paginas\")\r\n                    val datosClientes= resultado.getJSONArray(\"data\")\r\n                    val listaClientes = mutableListOf<Cliente>()\r\n                    for (i in 0 until datosClientes.length()) {\r\n                        val datosCliente = datosClientes.getJSONObject(i)\r\n                        val cliente = Cliente(\r\n                            codigo = datosCliente.getString(\"codigo\"),\r\n                            nombreComercial = datosCliente.getString(\"nombrecomercial\"),\r\n                            nombreJuridico = datosCliente.getString(\"nombrejuridico\"),\r\n                            Telefonos = datosCliente.getString(\"telefonos\"),\r\n                            correo = datosCliente.getString(\"emailgeneral\"),\r\n                            estado = datosCliente.getString(\"estado\")\r\n                        )\r\n                        listaClientes.add(cliente)\r\n                    }\r\n\r\n                    listaClientesActuales=listaClientesActuales+listaClientes\r\n                    isCargandoClientes=false\r\n                }\r\n                estadoPantallaCarga.cambiarEstadoMenuPrincipal(false)\r\n            }\r\n        }\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(70))\r\n                .background(Color(0xFF244BC0))\r\n                .constrainAs(bxSuperior) {\r\n                    top.linkTo(parent.top, margin = 0.dp)\r\n                    start.linkTo(parent.start, margin = 0.dp)\r\n                },\r\n            contentAlignment = Alignment.BottomCenter\r\n        ){\r\n            Row (horizontalArrangement = Arrangement.Start,\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                modifier = Modifier.padding(bottom = objetoAdaptardor.ajustarAlturaCompact(6))\r\n            ){\r\n                Icon(\r\n                    imageVector = Icons.Default.People,\r\n                    contentDescription =\"Icono Clientes\",\r\n                    tint = Color.White,\r\n                    modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(50))\r\n                )\r\n                Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(8)))\r\n                Text(\r\n                    \"Clientes\",\r\n                    fontFamily = fontAksharPrincipal,\r\n                    fontWeight =    FontWeight.SemiBold,\r\n                    fontSize = objetoAdaptardor.ajustarFont(45),\r\n                    color = Color.White,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis,\r\n                    textAlign = TextAlign.Center,\r\n                    modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(55))\r\n                )\r\n            }\r\n        }\r\n\r\n        LaunchedEffect(iniciarCargaDatos) {\r\n            delay(500)\r\n            iniciarCargaDatos=true\r\n        }\r\n\r\n        if(iniciarCargaDatos){\r\n            // Detecta si el usuario llega al final de la lista para cargar más\r\n            LaunchedEffect(lazyState) {\r\n                snapshotFlow { lazyState.layoutInfo.visibleItemsInfo.lastOrNull()?.index }\r\n                    .collect { lastVisibleIndex ->\r\n                        if (lastVisibleIndex == listaClientesActuales.lastIndex && !isCargandoClientes && paginaActualLazyColumn<ultimaPaginaLazyColumn) {\r\n                            paginaActualLazyColumn += 1 // Incrementa la página para cargar más elementos\r\n                            buscarClientes()\r\n                        }\r\n                    }\r\n            }\r\n\r\n            LaunchedEffect(datosIngresadosBarraBusqueda) {\r\n                listaClientesActuales= emptyList()\r\n                paginaActualLazyColumn=1\r\n                lazyState.scrollToItem(0)\r\n                buscarClientes()\r\n            }\r\n        }\r\n\r\n        TextField(\r\n            value = datosIngresadosBarraBusqueda,\r\n            onValueChange = {\r\n                datosIngresadosBarraBusqueda = it\r\n            },\r\n            leadingIcon = {\r\n                IconButton(\r\n                    onClick = {\r\n                        buscarClientes()\r\n                    }\r\n                ) {\r\n                    Icon(imageVector = Icons.Filled.Search,\r\n                        contentDescription = \"Icono Buscar\",\r\n                        tint= Color.DarkGray,\r\n                        modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(35))\r\n                    )\r\n                }\r\n\r\n            },\r\n            trailingIcon = {\r\n                IconButton(onClick = { isDialogOpen=true}) {\r\n                    Icon(imageVector = Icons.Filled.Tune,\r\n                        contentDescription = \"Icono Filtrar\",\r\n                        tint= Color.DarkGray,\r\n                        modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(35))\r\n                    )\r\n                }\r\n            },\r\n            placeholder = {\r\n                Text(\"Buscar...\",\r\n                    fontFamily = fontAksharPrincipal,\r\n                    fontWeight = FontWeight.Light,\r\n                    fontSize = objetoAdaptardor.ajustarFont(24),\r\n                    maxLines = 1\r\n                )\r\n            },\r\n            modifier = Modifier\r\n                .width(objetoAdaptardor.ajustarAnchoCompact(360))\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(60))\r\n                .constrainAs(txfBarraBusqueda){\r\n                    top.linkTo(bxSuperior.bottom, margin = objetoAdaptardor.ajustarAlturaCompact(8))\r\n                    start.linkTo(parent.start, margin = objetoAdaptardor.ajustarAnchoCompact(12))\r\n                },\r\n            shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(18)),\r\n            colors = TextFieldDefaults.colors(\r\n                focusedContainerColor = Color.LightGray,\r\n                unfocusedContainerColor = Color.LightGray,\r\n                disabledContainerColor = Color.White,\r\n                focusedIndicatorColor = Color.White,\r\n                unfocusedIndicatorColor = Color.White,\r\n                cursorColor = Color(0xFF244BC0),\r\n                focusedLabelColor = Color.DarkGray,\r\n                unfocusedLabelColor = Color.DarkGray\r\n            ),\r\n            textStyle = TextStyle(\r\n                fontFamily = fontAksharPrincipal,\r\n                fontWeight = FontWeight.Light,\r\n                color = Color.DarkGray, fontSize = objetoAdaptardor.ajustarFont(22),\r\n                textAlign = TextAlign.Justify\r\n            ),\r\n            maxLines = 1,\r\n            keyboardOptions = KeyboardOptions.Default.copy(\r\n                imeAction = ImeAction.Done\r\n            ),\r\n            keyboardActions = KeyboardActions(\r\n                onDone = { ocultarTeclado(contexto) }\r\n            )\r\n        )\r\n\r\n        Box(modifier = Modifier\r\n            .height(objetoAdaptardor.ajustarAlturaCompact(44))\r\n            .fillMaxWidth()\r\n            .constrainAs(bxOpcionAgregarCliente){\r\n                top.linkTo(txfBarraBusqueda.bottom, margin = 0.dp)\r\n                start.linkTo(parent.start, margin = 0.dp)\r\n            },\r\n            contentAlignment = Alignment.Center\r\n        ){\r\n            Button(modifier = Modifier\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(45)),\r\n                onClick = {\r\n                    iniciarPantallaAgregarClente=true\r\n                },\r\n                colors = ButtonDefaults.buttonColors(\r\n                    containerColor = Color.White, // Color de fondo del botón\r\n                    contentColor = Color(0xFF244BC0)\r\n                )\r\n            ){\r\n                Row {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.PersonAdd,\r\n                        contentDescription = \"Icono agregar Cliente\"\r\n                    )\r\n                    Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(4)))\r\n\r\n                    Text(\r\n                        text = \"Agregar cliente\",\r\n                        maxLines = 1,\r\n                        fontFamily = fontAksharPrincipal,\r\n                        fontWeight = FontWeight.Light,\r\n                        fontSize = objetoAdaptardor.ajustarFont(19)\r\n                    )\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(538))\r\n                .background(Color.White)\r\n                .fillMaxWidth()\r\n                .constrainAs(bxContenedorDatosClientes){\r\n                    top.linkTo(bxOpcionAgregarCliente.bottom, margin = objetoAdaptardor.ajustarAlturaCompact(2))\r\n                    start.linkTo(parent.start)\r\n                },\r\n            contentAlignment = Alignment.Center\r\n        ){\r\n            LazyColumn(\r\n                modifier = Modifier.fillMaxSize(),\r\n                verticalArrangement = Arrangement.spacedBy(objetoAdaptardor.ajustarAlturaCompact(12)),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                state = lazyState\r\n            ) {\r\n                items(listaClientesActuales) { cliente ->\r\n                    AgregarBxConenedorInformacionCliente(\r\n                        datosCliente = cliente,\r\n                        navControllerPantallasModuloClientes = navControllerPantallasModuloClientes,\r\n                        estadoPantallaCarga= estadoPantallaCarga\r\n                    )\r\n                }\r\n\r\n                // Muestra el indicador de carga al final de la lista mientras se cargan nuevos elementos\r\n                if (isCargandoClientes) {\r\n                    item {\r\n                        CircularProgressIndicator(\r\n                            color = Color(0xFF244BC0),\r\n                            modifier = Modifier\r\n                                .size(objetoAdaptardor.ajustarAlturaCompact(30))\r\n                                .padding(2.dp)\r\n                        )\r\n                    }\r\n                }\r\n                item { Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(4))) }\r\n\r\n            }\r\n        }\r\n\r\n        // Snackbar inferior para mostrar mensajes emergentes para el usuario como:\r\n        // - Problemas de Red\r\n        // - Contraseñas Incorrectas\r\n        // - Correos incorrectos o no encontrados\r\n        SnackbarHost(\r\n            hostState = snackbarHostState,\r\n            snackbar = { snackbarData ->\r\n                Snackbar(\r\n                    containerColor = Color.White, // Color de fondo del Snackbar\r\n                    contentColor = Color.DarkGray // Color del texto del Snackbar\r\n\r\n                ) {\r\n                    Row(\r\n                        modifier = Modifier.padding(objetoAdaptardor.ajustarAlturaCompact(8)),// Añadir algo de padding para espaciado\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = iconoSnht,\r\n                            contentDescription = \"Icono de error\",\r\n                            tint = colorIconoSnht, // Cambiar el color del ícono si deseas\r\n                            modifier = Modifier.padding(end = objetoAdaptardor.ajustarAnchoCompact(8)).size(objetoAdaptardor.ajustarAlturaCompact(35)) // Espacio entre ícono y texto\r\n                        )\r\n                        Text(\r\n                            text = snackbarData.visuals.message,\r\n                            style = TextStyle(\r\n                                color = Color.Black,\r\n                                fontSize = objetoAdaptardor.ajustarFont(15),\r\n                                fontWeight = FontWeight.Light,\r\n                                fontFamily = fontAksharPrincipal\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .constrainAs(snhtMensajesSuperiores) {\r\n                    top.linkTo(parent.top, margin = 0.dp)\r\n                    start.linkTo(parent.start)\r\n                }\r\n        )\r\n        // Cuadro emergente (Diálogo)\r\n        if (isDialogOpen) {\r\n            AlertDialog(\r\n                modifier = Modifier.background(Color.White),\r\n                containerColor = Color.White,\r\n                onDismissRequest = {  },\r\n                title = {\r\n                    Text(\r\n                        \"Filtros de búsqueda\",\r\n                        fontFamily = fontAksharPrincipal,\r\n                        fontWeight = FontWeight.Medium,\r\n                        fontSize = objetoAdaptardor.ajustarFont(27),\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis,\r\n                        textAlign = TextAlign.Center,\r\n                        color = Color.Black\r\n                    )\r\n                },\r\n                text = {\r\n                    Column {\r\n                        // Primer DropdownMenu\r\n                        FiltroDropdownMenu(\r\n                            label = \"Buscar por: \",\r\n                            opciones = listOf(\"Busqueda Mixta\",\"Nombre\", \"Cédula\", \"Código\", \"Dirección\"),\r\n                            selectedOption = opcionFiltroPor,\r\n                            opcionSeleccionada = { opcionFiltroPor = it }\r\n                        )\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8)))\r\n                        // Segundo DropdownMenu\r\n                        FiltroDropdownMenu(\r\n                            label = \"Estado:\",\r\n                            opciones = listOf(\"Activos y Suspendidos\",\"Todos\", \"Activo\", \"Suspendido\", \"Eliminado\"),\r\n                            selectedOption = opcionFiltroEstado,\r\n                            opcionSeleccionada = { opcionFiltroEstado = it }\r\n                        )\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8)))\r\n                        // Segundo DropdownMenu\r\n                        FiltroDropdownMenu(\r\n                            label = \"Zona:\",\r\n                            opciones = listOf(),\r\n                            selectedOption = opcionFiltroZona,\r\n                            opcionSeleccionada = { opcionFiltroZona = it }\r\n                        )\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8)))\r\n                        // Segundo DropdownMenu\r\n                        FiltroDropdownMenu(\r\n                            label = \"Tipo:\",\r\n                            opciones = listOf(),\r\n                            selectedOption = opcionFiltroTipo,\r\n                            opcionSeleccionada = { opcionFiltroTipo = it }\r\n                        )\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(8)))\r\n                        // Segundo DropdownMenu\r\n                        FiltroDropdownMenu(\r\n                            label = \"Agente de Venta:\",\r\n                            opciones = listOf(),\r\n                            selectedOption = opcionFiltroAgenteVenta,\r\n                            opcionSeleccionada = { opcionFiltroAgenteVenta = it }\r\n                        )\r\n                    }\r\n                },\r\n                confirmButton = {\r\n                    Button(\r\n                        onClick = {\r\n                            CoroutineScope(Dispatchers.IO).launch {\r\n                                isDialogOpen = false\r\n                                listaClientesActuales= emptyList()\r\n                                paginaActualLazyColumn=1\r\n                                lazyState.scrollToItem(0)\r\n                                buscarClientes()\r\n                            }\r\n                        },\r\n                        colors = ButtonDefaults.buttonColors(\r\n                            containerColor = Color(0xFF244BC0), // Color de fondo del botón\r\n                            contentColor = Color.White,\r\n                            disabledContainerColor = Color(0xFF244BC0),\r\n                            disabledContentColor = Color.White\r\n                        )\r\n                    ) {\r\n                        Text(\r\n                            \"Aplicar Filtros\",\r\n                            fontFamily = fontAksharPrincipal,\r\n                            fontWeight = FontWeight.Medium,\r\n                            fontSize = objetoAdaptardor.ajustarFont(15),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Center,\r\n                            color = Color.White\r\n                        )\r\n                    }\r\n                },\r\n                dismissButton = {\r\n                    Button(\r\n                        onClick = { isDialogOpen = false },\r\n                        colors = ButtonDefaults.buttonColors(\r\n                            containerColor = Color.Red, // Color de fondo del botón\r\n                            contentColor = Color.White,\r\n                            disabledContainerColor = Color.Red,\r\n                            disabledContentColor = Color.White\r\n                        )\r\n                    ) {\r\n                        Text(\r\n                            \"Cancelar\",\r\n                            fontFamily = fontAksharPrincipal,\r\n                            fontWeight = FontWeight.Medium,\r\n                            fontSize = objetoAdaptardor.ajustarFont(15),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Center,\r\n                            color = Color.White\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun AgregarBxConenedorInformacionCliente(\r\n    datosCliente: Cliente,\r\n    navControllerPantallasModuloClientes: NavController,\r\n    estadoPantallaCarga: EstadoPantallaCarga\r\n){\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    val fontAksharPrincipal = FontFamily(Font(R.font.akshar_medium))\r\n    var iniciarPantallaInformacionCliente by remember { mutableStateOf(false) }\r\n\r\n    LaunchedEffect(iniciarPantallaInformacionCliente) {\r\n        if (iniciarPantallaInformacionCliente){\r\n            estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)\r\n            navControllerPantallasModuloClientes.navigate(RutasPantallasModuloClientes.PantallaInfoCliente.ruta+\"/${datosCliente.codigo}\"){\r\n                restoreState= true\r\n                launchSingleTop=true\r\n            }\r\n        }\r\n    }\r\n\r\n    Card(\r\n        modifier = Modifier\r\n            .height(objetoAdaptardor.ajustarAlturaCompact(115))\r\n            .clickable {\r\n                CoroutineScope(Dispatchers.IO).launch {\r\n                    iniciarPantallaInformacionCliente= true\r\n                } }\r\n            .width(objetoAdaptardor.ajustarAnchoCompact(360))\r\n            .shadow(\r\n                elevation = objetoAdaptardor.ajustarAlturaCompact(7),\r\n                shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(20))\r\n            ),\r\n        shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(20)),\r\n        colors = CardDefaults.cardColors(containerColor = Color.White)\r\n    ) {\r\n        Row {\r\n            Box(modifier = Modifier\r\n                .fillMaxHeight()\r\n                .width(objetoAdaptardor.ajustarAnchoCompact(20))\r\n                .background(\r\n                    when (datosCliente.estado) {\r\n                        \"1\" -> {\r\n                            Color(0xFF00C05A)\r\n                        }\r\n                        \"2\" -> {\r\n                            Color(0xFFF3ED00)\r\n                        }\r\n                        else -> {\r\n                            Color(0xFFD50000)\r\n                        }\r\n                    }\r\n                )\r\n            )\r\n\r\n            Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(8)))\r\n\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxHeight()\r\n                    .fillMaxWidth()\r\n                , contentAlignment = Alignment.CenterStart\r\n            ){\r\n                Row {\r\n                    Column {\r\n                        Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(2)))\r\n\r\n                        // Codigo Cliente\r\n                        Text(text = \"#\"+datosCliente.codigo,\r\n                            fontFamily = fontAksharPrincipal,\r\n                            fontWeight =    FontWeight.SemiBold,\r\n                            fontSize = objetoAdaptardor.ajustarFont(15),\r\n                            color = Color.Black,\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Start,\r\n                            modifier = Modifier\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(19))\r\n                                .width(objetoAdaptardor.ajustarAnchoCompact(260))\r\n                        )\r\n\r\n                        // Nombre Comercial\r\n                        Text(datosCliente.nombreComercial\r\n                            ,fontFamily = fontAksharPrincipal,\r\n                            fontWeight =    FontWeight.SemiBold,\r\n                            fontSize =  objetoAdaptardor.ajustarFont(17),\r\n                            color = Color.Black,\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Start,\r\n                            modifier = Modifier\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(26))\r\n                                .width(objetoAdaptardor.ajustarAnchoCompact(260))\r\n                        )\r\n\r\n                        // Nombre Juridico\r\n                        Text(datosCliente.nombreJuridico\r\n                            ,fontFamily = fontAksharPrincipal,\r\n                            fontWeight =    FontWeight.SemiBold,\r\n                            fontSize =  objetoAdaptardor.ajustarFont(15),\r\n                            color = Color(0xFF626262),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Start,\r\n                            modifier = Modifier\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(23))\r\n                                .width(objetoAdaptardor.ajustarAnchoCompact(260))\r\n                        )\r\n\r\n                        // Telefono\r\n                        Text(datosCliente.Telefonos\r\n                            ,fontFamily = fontAksharPrincipal,\r\n                            fontWeight =    FontWeight.SemiBold,\r\n                            fontSize =  objetoAdaptardor.ajustarFont(15),\r\n                            color = Color(0xFF626262),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Start,\r\n                            modifier = Modifier\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(19))\r\n                                .width(objetoAdaptardor.ajustarAnchoCompact(260))\r\n                        )\r\n\r\n                        // Correo\r\n                        Text(datosCliente.correo\r\n                            ,fontFamily = fontAksharPrincipal,\r\n                            fontWeight =    FontWeight.SemiBold,\r\n                            fontSize =  objetoAdaptardor.ajustarFont(15),\r\n                            color = Color(0xFF626262),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Start,\r\n                            modifier = Modifier\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(23))\r\n                                .width(objetoAdaptardor.ajustarAnchoCompact(260))\r\n                        )\r\n                    }\r\n\r\n                    // Opciones\r\n                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center){\r\n\r\n                        IconButton(\r\n                            onClick = {\r\n                                CoroutineScope(Dispatchers.IO).launch {\r\n                                    iniciarPantallaInformacionCliente= true\r\n                                }\r\n                            }\r\n                        ) {\r\n                            Icon(\r\n                                imageVector = Icons.Filled.MoreHoriz,\r\n                                contentDescription = \"Icono mostrar opciones clientes\",\r\n                                tint = Color.DarkGray,\r\n                                modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(50))\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun FiltroDropdownMenu(\r\n    label: String,\r\n    opciones: List<String>,\r\n    selectedOption: String,\r\n    opcionSeleccionada: (String) -> Unit\r\n) {\r\n    val fontAksharPrincipal = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    var expanded by remember { mutableStateOf(false) } // Controla si el menú está abierto\r\n\r\n    Column(modifier = Modifier.background(Color.White)) {\r\n        Text(\r\n            label,\r\n            fontFamily = fontAksharPrincipal,\r\n            fontWeight = FontWeight.Medium,\r\n            fontSize = objetoAdaptardor.ajustarFont(18),\r\n            maxLines = 1,\r\n            overflow = TextOverflow.Ellipsis,\r\n            textAlign = TextAlign.Center,\r\n            color = Color.Black\r\n        )\r\n        Spacer(modifier = Modifier.height(4.dp))\r\n        OutlinedButton(onClick = { expanded = !expanded }) {\r\n            Text(\r\n                selectedOption,\r\n                fontFamily = fontAksharPrincipal,\r\n                fontWeight = FontWeight.Medium,\r\n                fontSize = objetoAdaptardor.ajustarFont(17),\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis,\r\n                textAlign = TextAlign.Center,\r\n                color = Color.Black\r\n            )\r\n        }\r\n        DropdownMenu(\r\n            expanded = expanded,\r\n            onDismissRequest = { expanded = false },\r\n            modifier = Modifier.background(Color.White)\r\n        ) {\r\n            opciones.forEach { opcion ->\r\n                DropdownMenuItem(\r\n                    onClick = {\r\n                        opcionSeleccionada(opcion)\r\n                        expanded = false // Cierra el menú después de seleccionar\r\n                    },\r\n                    text = {\r\n                        Text(\r\n                            opcion,\r\n                            fontFamily = fontAksharPrincipal,\r\n                            fontWeight = FontWeight.Medium,\r\n                            fontSize = objetoAdaptardor.ajustarFont(17),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            textAlign = TextAlign.Center,\r\n                            color = Color.Black\r\n                        )\r\n                    },\r\n                    modifier = Modifier.background(Color.White)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfun quitarTildesYMinusculas(texto: String): String {\r\n    val textoNormalizado = Normalizer.normalize(texto, Normalizer.Form.NFD)\r\n    val textoSinTildes = textoNormalizado.replace(Regex(\"\\\\p{M}\"), \"\")\r\n    val textoSinEspacios= textoSinTildes.replace(\" \", \"\")\r\n    println(textoSinEspacios)\r\n    return if (texto==\"Busqueda Mixta\") textoSinEspacios else textoSinEspacios.lowercase()\r\n}\r\n\r\n\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Preview(){\r\n    val systemUiController = rememberSystemUiController()\r\n    val estadoPantallaCarga = EstadoPantallaCarga()\r\n    val estado = EstadoRespuestaApi()\r\n\r\n    IniciarInterfazModuloClientes(\"\", systemUiController, estadoPantallaCarga, estado)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazModuloClientes.kt b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazModuloClientes.kt
--- a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazModuloClientes.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazModuloClientes.kt	(date 1733437143117)
@@ -84,7 +84,8 @@
 import com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact
 import com.soportereal.invefacon.interfaces.compact.inicio_sesion.ocultarTeclado
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga
-import com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoRespuestaApi
+import com.soportereal.invefacon.interfaces.compact.pantallas_principales._estadoPantallaCarga
+import com.soportereal.invefacon.interfaces.compact.pantallas_principales.datosEstadoRespuestaApi
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.Job
@@ -98,7 +99,7 @@
     apiToken: String,
     systemUiController: SystemUiController,
     estadoPantallaCarga: EstadoPantallaCarga,
-    estadoRespuestaApi: EstadoRespuestaApi
+    datosEstadoRespuestaApi: datosEstadoRespuestaApi
 ) {
 
     val navControllerPantallasModuloCliente= rememberNavController()
@@ -111,7 +112,7 @@
                 innerPadding= innerPadding,
                 systemUiController= systemUiController,
                 estadoPantallaCarga= estadoPantallaCarga,
-                estadoRespuestaApi= estadoRespuestaApi
+                datosEstadoRespuestaApi= datosEstadoRespuestaApi
             )
         }
     )
@@ -124,7 +125,7 @@
     navControllerPantallasModuloClientes: NavController,
     systemUiController: SystemUiController,
     estadoPantallaCarga: EstadoPantallaCarga,
-    estadoRespuestaApi: EstadoRespuestaApi
+    datosEstadoRespuestaApi: datosEstadoRespuestaApi
 ){
     systemUiController.setStatusBarColor(Color(0xFF244BC0))
     systemUiController.setNavigationBarColor(Color.Black)
@@ -166,7 +167,7 @@
 
     LaunchedEffect(iniciarPantallaAgregarClente) {
         if (iniciarPantallaAgregarClente){
-            estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)
+            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
             navControllerPantallasModuloClientes.navigate(RutasPantallasModuloClientes.PantallaAgregarCliente.ruta){
                 restoreState= true
                 launchSingleTop=true
@@ -258,7 +259,7 @@
                     listaClientesActuales=listaClientesActuales+listaClientes
                     isCargandoClientes=false
                 }
-                estadoPantallaCarga.cambiarEstadoMenuPrincipal(false)
+                _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
             }
         }
 
@@ -647,7 +648,7 @@
 
     LaunchedEffect(iniciarPantallaInformacionCliente) {
         if (iniciarPantallaInformacionCliente){
-            estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)
+            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
             navControllerPantallasModuloClientes.navigate(RutasPantallasModuloClientes.PantallaInfoCliente.ruta+"/${datosCliente.codigo}"){
                 restoreState= true
                 launchSingleTop=true
@@ -883,7 +884,7 @@
 private fun Preview(){
     val systemUiController = rememberSystemUiController()
     val estadoPantallaCarga = EstadoPantallaCarga()
-    val estado = EstadoRespuestaApi()
+    val estado = datosEstadoRespuestaApi()
 
     IniciarInterfazModuloClientes("", systemUiController, estadoPantallaCarga, estado)
 }
\ No newline at end of file
Index: app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/FuncionesHttp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.funciones_de_interfaces\r\n\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.withContext\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.Request\r\nimport okhttp3.Response\r\nimport okio.IOException\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.io.PrintWriter\r\nimport java.io.StringWriter\r\nimport kotlin.coroutines.cancellation.CancellationException\r\n\r\nclass FuncionesHttp(private val servidorUrl:String, private val apiToken:String) {\r\n\r\n    suspend fun metodoPost(formBody: MultipartBody, apiDirectorio: String): JSONObject? {\r\n        // Estado para el cliente HTTP\r\n        val client = OkHttpClient()\r\n        // Configuración de la solicitud POST\r\n        val request = Request.Builder()\r\n            .url(\"$servidorUrl/$apiDirectorio\")\r\n            .post(formBody)\r\n            .addHeader(\"Content-Type\", \"application/json\")\r\n            .addHeader(\"Authorization\", \"Bearer $apiToken\")\r\n            .build()\r\n        return try {\r\n            // Ejecutar la solicitud en el contexto de IO\r\n            val response: Response = withContext(Dispatchers.IO) {\r\n                client.newCall(request).execute()\r\n            }\r\n            val jsonObjectResponse: JSONObject\r\n            if (response.isSuccessful) {\r\n                val responseBody = response.body?.string()\r\n                if (responseBody != null) {\r\n                    println(responseBody)\r\n                    // Parsear el JSON y extraer los datos necesarios\r\n                    jsonObjectResponse = JSONObject(responseBody)\r\n                        jsonObjectResponse\r\n                } else {\r\n                    null\r\n                }\r\n            } else {\r\n                println(\"Request failed with code: ${response.code}\")\r\n                null\r\n            }\r\n        } catch (e: IOException) {\r\n            println(\"Error de red: ${e.message}\")\r\n            e.printStackTrace()\r\n            null\r\n        } catch (e: JSONException) {\r\n            println(\"Error al parsear JSON: ${e.message}\")\r\n            e.printStackTrace()\r\n            null\r\n        } catch (e: CancellationException){\r\n            val jsonString = \"\"\"{\"code\":921}\"\"\"\r\n            JSONObject(jsonString)\r\n        } catch (e: Exception) {\r\n            println(\"Error desconocido: ${e.message}\")\r\n            val sw = StringWriter()\r\n            e.printStackTrace(PrintWriter(sw))\r\n            println(\"error especifico: $sw\")\r\n            null\r\n        }\r\n        }\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/FuncionesHttp.kt b/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/FuncionesHttp.kt
--- a/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/FuncionesHttp.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/funciones_de_interfaces/FuncionesHttp.kt	(date 1733436894862)
@@ -9,8 +9,6 @@
 import okio.IOException
 import org.json.JSONException
 import org.json.JSONObject
-import java.io.PrintWriter
-import java.io.StringWriter
 import kotlin.coroutines.cancellation.CancellationException
 
 class FuncionesHttp(private val servidorUrl:String, private val apiToken:String) {
@@ -30,38 +28,24 @@
             val response: Response = withContext(Dispatchers.IO) {
                 client.newCall(request).execute()
             }
-            val jsonObjectResponse: JSONObject
             if (response.isSuccessful) {
                 val responseBody = response.body?.string()
-                if (responseBody != null) {
-                    println(responseBody)
-                    // Parsear el JSON y extraer los datos necesarios
-                    jsonObjectResponse = JSONObject(responseBody)
-                        jsonObjectResponse
-                } else {
-                    null
-                }
+                JSONObject( responseBody ?:"""{"code":400,"status":"error","data":"El servidor no regresó ningun dato"}""")
             } else {
-                println("Request failed with code: ${response.code}")
-                null
+                JSONObject(sanitizarJson("""{"code":400,"status":"error","data":"Error respuesta servidor"}"""))
             }
         } catch (e: IOException) {
-            println("Error de red: ${e.message}")
-            e.printStackTrace()
-            null
+            JSONObject("""{"code":400,"status":"error","data":"revise su conexión a Internet"}""")
         } catch (e: JSONException) {
-            println("Error al parsear JSON: ${e.message}")
-            e.printStackTrace()
-            null
+            JSONObject(sanitizarJson("""{"code":400,"status":"error","data":"Error al parsear JSON"}"""))
         } catch (e: CancellationException){
-            val jsonString = """{"code":921}"""
-            JSONObject(jsonString)
+            null
         } catch (e: Exception) {
-            println("Error desconocido: ${e.message}")
-            val sw = StringWriter()
-            e.printStackTrace(PrintWriter(sw))
-            println("error especifico: $sw")
-            null
+           JSONObject(sanitizarJson("""{"code":400,"status":"error","data":"Error desconocido"}"""))
         }
-        }
-    }
+    }
+}
+// Función para sanitizar el JSON
+private fun sanitizarJson(jsonString: String): String {
+    return jsonString.replace("\"", "\\\"").replace("\\\"", "\"") // Escapa las comillas si es necesario
+}
\ No newline at end of file
Index: app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazInformacionCliente.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.interfaces.compact.modulos.clientes\r\n\r\n\r\nimport android.app.DatePickerDialog\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.heightIn\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.AccountCircle\r\nimport androidx.compose.material.icons.filled.Assessment\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Error\r\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\r\nimport androidx.compose.material.icons.filled.KeyboardArrowUp\r\nimport androidx.compose.material.icons.filled.MonetizationOn\r\nimport androidx.compose.material.icons.filled.PermIdentity\r\nimport androidx.compose.material.icons.filled.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.Snackbar\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Switch\r\nimport androidx.compose.material3.SwitchDefaults\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateMapOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.runtime.snapshots.SnapshotStateMap\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.focus.focusRequester\r\nimport androidx.compose.ui.focus.onFocusChanged\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.navigation.NavController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\nimport com.soportereal.invefacon.R\r\nimport com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact\r\nimport com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport org.json.JSONObject\r\nimport java.util.Calendar\r\nimport java.util.Locale\r\n\r\n\r\n@Composable\r\nfun IniciarInterfazInformacionCliente(\r\n    codigoCliente: String,\r\n    token: String,\r\n    navControllerPantallasModuloClientes: NavController?,\r\n    estadoPantallaCarga: EstadoPantallaCarga\r\n){\r\n    val systemUiController = rememberSystemUiController()\r\n    systemUiController.setStatusBarColor(Color(0xFF244BC0))\r\n    systemUiController.setNavigationBarColor(Color.Black)\r\n    val fontAksharPrincipal = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    val lazyState= rememberLazyListState()\r\n    var datosCliente by remember { mutableStateOf(JSONObject(\"{\\\"codigo\\\":\\\"502\\\",\\\"cedula\\\":\\\"00119690923\\\",\\\"cedulatipo\\\":\\\"00\\\",\\\"nombrejuridico\\\":\\\"sintaxis\\n\" +\r\n            \"web work\\\",\\\"nombrecomercial\\\":\\\"Kendall\\\",\\\"direccion\\\":\\\"Leon\\n\" +\r\n            \"XIII\\\",\\\"telefonos\\\":\\\"63707362\\\",\\\"emailgeneral\\\":\\\"\\\",\\\"emailfactura\\\":\\\"kendall@gmail.com\\\",\\\"emailcobros\\\":\\\"kendall@gmail.com\\\",\\\"contacto\\\":\\\"Kendall\\\",\\\"creditomonto\\\":\\\"1000000.00\\\",\\\"creditoplazo\\\":\\\"500\\\",\\\"diacobro\\\":\\\"15\\\",\\\"zona\\\":\\\"3\\\",\\\"descripcion_zona\\\":\\\"CARTAGO\\\",\\\"clientetipo\\\":\\\"A\\\",\\\"descripcion_tipo\\\":\\\"Empresas\\\",\\\"ultimaventa\\\":null,\\\"agenteventas\\\":\\\"00007\\\",\\\"tipoprecio\\\":\\\"1\\\",\\\"descuento\\\":\\\"15.00\\\",\\\"moneda\\\":\\\"CRC\\\",\\\"estado\\\":\\\"1\\\",\\\"tienecredito\\\":\\\"0\\\",\\\"noforzarcredito\\\":\\\"0\\\",\\\"fechacreado\\\":\\\"2024-11-20\\n\" +\r\n            \"08:32:35.000\\\",\\\"FechaNacimiento\\\":\\\"2006-01-16\\n\" +\r\n            \"00:00:00.000\\\",\\\"MontoContrato\\\":\\\"1000000.0000\\\",\\\"DetalleContrato\\\":\\\"1000000\\\",\\\"exento\\\":\\\"0\\\",\\\"exonerado\\\":\\\"0\\\"}\")) }\r\n    var modoEdicionActivado by remember { mutableStateOf(false) }\r\n    var errorResultadoApi by remember { mutableStateOf<Boolean?>(null) }\r\n    var mostrarDatosCliente by remember { mutableStateOf(false) }\r\n    val objectoProcesadorDatosApi= ProcesarDatosModuloClientes(token)\r\n    var snackbarVisible by remember { mutableStateOf(false) }\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val iconoSnht= if(errorResultadoApi==true) Icons.Filled.Error else Icons.Filled.Check\r\n    val colorIconoSnht= if (errorResultadoApi==true) Color.Red else Color.Green\r\n    var isCosultaDatasFinalizada by remember { mutableIntStateOf(0) }\r\n    val opcionesTipoCliente: SnapshotStateMap<String, String> = remember { mutableStateMapOf() }\r\n    var codigoTipoClienteSeleccionado by remember { mutableStateOf(\"\") }\r\n    val opcionesAgentesVentasClienteActivos: SnapshotStateMap<String, String> = remember { mutableStateMapOf() }\r\n    var codigoAgenteVentasSeleccionado by remember { mutableStateOf(\"\") }\r\n    var opciontieneCreditoSeleccionada by remember { mutableStateOf(\"\") }\r\n    var opcionExentoSeleccionada by remember { mutableStateOf(\"\") }\r\n    var guardarEdicionCliente by remember { mutableStateOf(false) }\r\n\r\n\r\n    val opcionesEstadoCliente= remember {\r\n        mutableStateMapOf(\r\n            \"1\" to \"Activo\",\r\n            \"2\" to \"Suspendido\",\r\n            \"3\" to \"Eliminado\"\r\n        )\r\n    }\r\n\r\n    val opcionesLogicasCliente= remember {\r\n        mutableStateMapOf(\r\n            \"0\" to \"No\",\r\n            \"1\" to \"Sí\"\r\n        )\r\n    }\r\n\r\n    val opcionesTipoPrecioCliente= remember {\r\n        mutableStateMapOf<String, String>().apply {\r\n            for (i in 1..10){\r\n                put(\"$i\", \"$i\")\r\n            }\r\n        }\r\n    }\r\n\r\n    val opcionesTipoIndentificacionCliente= remember {\r\n        mutableStateMapOf(\r\n            \"00\" to \"No definido\",\r\n            \"01\" to \"Física\",\r\n            \"02\" to \"Jurídica\",\r\n            \"03\" to \"Dimex\",\r\n            \"04\" to \"Nite\"\r\n        )\r\n    }\r\n    var codigoTipoIdentificacionClienteSeleccionada by remember { mutableStateOf(\"\") }\r\n\r\n    LaunchedEffect(snackbarHostState) {\r\n        snackbarHostState.currentSnackbarData?.dismiss()\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        val result= objectoProcesadorDatosApi.obtenerDatosClientes(\r\n            clienteDatoBusqueda = codigoCliente\r\n        )\r\n        //validar si la respuesta de la api fue exitosa\r\n        if (result==null){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: revise su conexión a Internet\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n        }\r\n        else if (result.getInt(\"code\")==921){\r\n            println(\"hola\")\r\n\r\n        }\r\n        else if (result.getString(\"status\")==\"error\"){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: ${result.getString(\"data\")}\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n\r\n        }\r\n        else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n            val resultado= result.getJSONObject(\"resultado\")\r\n            val datos= resultado.getJSONArray(\"data\")\r\n            for (i in 0 until datos.length()) {\r\n                datosCliente= JSONObject(datos.getJSONObject(i).toString())\r\n            }\r\n            delay(500)\r\n            mostrarDatosCliente= true\r\n        }\r\n        isCosultaDatasFinalizada++\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        val result= objectoProcesadorDatosApi.obtenerDatosAgentes()\r\n        //validar si la respuesta de la api fue exitosa\r\n        if (result==null){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: revise su conexión a Internet\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n        }\r\n        else if (result.getInt(\"code\")==921){\r\n            println(\"hola\")\r\n\r\n        }\r\n        else if (result.getString(\"status\")==\"error\"){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: ${result.getString(\"data\")}\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n\r\n        }\r\n        else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n            val resultado= result.getJSONObject(\"resultado\")\r\n            val datos= resultado.getJSONArray(\"data\")\r\n            for (i in 0 until datos.length()) {\r\n                val datosAgente= datos.getJSONObject(i)\r\n                opcionesAgentesVentasClienteActivos[datosAgente.getString(\"Cod_Usuario\")]= datosAgente.getString(\"Nombre\")\r\n\r\n\r\n            }\r\n        }\r\n        isCosultaDatasFinalizada++\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        val result= objectoProcesadorDatosApi.obtenerTiposClientes()\r\n        //validar si la respuesta de la api fue exitosa\r\n        if (result==null){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: revise su conexión a Internet\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n        }\r\n        else if (result.getInt(\"code\")==921){\r\n            println(\"hola\")\r\n\r\n        }\r\n        else if (result.getString(\"status\")==\"error\"){\r\n            if (!snackbarVisible) {\r\n                errorResultadoApi=true\r\n                coroutineScope.launch {\r\n                    snackbarVisible=true\r\n                    snackbarHostState.showSnackbar(\r\n                        message = \"Error: ${result.getString(\"data\")}\"\r\n                    )\r\n                    snackbarHostState.currentSnackbarData?.dismiss()\r\n                    snackbarVisible=false\r\n                }\r\n            }\r\n        }\r\n        else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n            val resultado= result.getJSONObject(\"resultado\")\r\n            val datos= resultado.getJSONArray(\"data\")\r\n            for (i in 0 until datos.length()) {\r\n                val datosTipoCliente= datos.getJSONObject(i)\r\n                opcionesTipoCliente[datosTipoCliente.getString(\"Cod_Tipo_Cliente\")]= datosTipoCliente.getString(\"Descripcion\")\r\n            }\r\n        }\r\n        isCosultaDatasFinalizada++\r\n    }\r\n\r\n    LaunchedEffect(isCosultaDatasFinalizada) {\r\n        if (isCosultaDatasFinalizada==3){\r\n            codigoTipoClienteSeleccionado= datosCliente.getString(\"clientetipo\")\r\n            codigoAgenteVentasSeleccionado= datosCliente.getString(\"agenteventas\")\r\n            codigoTipoIdentificacionClienteSeleccionada= datosCliente.getString(\"cedulatipo\")\r\n            opciontieneCreditoSeleccionada= datosCliente.getString(\"tienecredito\")\r\n            opcionExentoSeleccionada= datosCliente.getString(\"exento\")\r\n            delay(500)\r\n            estadoPantallaCarga.cambiarEstadoMenuPrincipal(false)\r\n            isCosultaDatasFinalizada=0\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    ConstraintLayout(\r\n        modifier = Modifier\r\n        .fillMaxWidth()\r\n        .height(objetoAdaptardor.ajustarAlturaCompact(722))\r\n        .background(Color(0xFFFFFFFF))\r\n        .statusBarsPadding()\r\n        .navigationBarsPadding()\r\n    ) {\r\n        val (bxSuperior, bxContenedorLzColum, snhtMensajesSuperiores)= createRefs()\r\n\r\n        //Box superior Informacion Cliente\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(70))\r\n                .background(Color(0xFF244BC0))\r\n                .constrainAs(bxSuperior) {\r\n                    top.linkTo(parent.top)\r\n                    start.linkTo(parent.start)\r\n                },\r\n            contentAlignment = Alignment.BottomCenter\r\n        ){\r\n            Row (horizontalArrangement = Arrangement.Start,\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                modifier = Modifier.padding(bottom = objetoAdaptardor.ajustarAlturaCompact(6))\r\n            ){\r\n                Icon(\r\n                    imageVector = Icons.Default.PermIdentity,\r\n                    contentDescription =\"Icono Clientes\",\r\n                    tint = Color.White,\r\n                    modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(45))\r\n                )\r\n                Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(8)))\r\n                Text(\r\n                    \"Información del Cliente\",\r\n                    fontFamily = fontAksharPrincipal,\r\n                    fontWeight =    FontWeight.SemiBold,\r\n                    fontSize = objetoAdaptardor.ajustarFont(35),\r\n                    color = Color.White,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis,\r\n                    textAlign = TextAlign.Center,\r\n                    modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(45))\r\n                )\r\n            }\r\n        }\r\n\r\n        if (mostrarDatosCliente){\r\n\r\n            var tipoCedula by remember { mutableStateOf(datosCliente.getString(\"cedulatipo\")) }\r\n            var cedulaCliente by remember { mutableStateOf(datosCliente.getString(\"cedula\")) }\r\n            var nombreJuridico by remember { mutableStateOf(datosCliente.getString(\"nombrejuridico\")) }\r\n            var nombreComercial by remember { mutableStateOf(datosCliente.getString(\"nombrecomercial\")) }\r\n            var fechaNacimiento by remember { mutableStateOf(datosCliente.getString(\"FechaNacimiento\")) }\r\n\r\n            //Informacion Contacto\r\n            var direccion by remember { mutableStateOf(datosCliente.getString(\"direccion\")) }\r\n            var telefono by remember { mutableStateOf(datosCliente.getString(\"telefonos\")) }\r\n            var emailGeneral by remember { mutableStateOf(datosCliente.getString(\"emailgeneral\")) }\r\n            var emailFactura by remember { mutableStateOf(datosCliente.getString(\"emailfactura\")) }\r\n            var emailCobros by remember { mutableStateOf(datosCliente.getString(\"emailcobros\")) }\r\n            var contacto by remember { mutableStateOf(datosCliente.getString(\"contacto\")) }\r\n\r\n            //Informacion Financiera\r\n            var creditoMonto by remember { mutableStateOf(datosCliente.getString(\"creditomonto\")) }\r\n            var creditoPlazo by remember { mutableStateOf(datosCliente.getString(\"creditoplazo\")) }\r\n            var diaCobro by remember { mutableStateOf(datosCliente.getString(\"diacobro\")) }\r\n            var clienteTipo by remember { mutableStateOf(datosCliente.getString(\"clientetipo\")) }\r\n            var monedaCliente by remember { mutableStateOf(datosCliente.getString(\"moneda\")) }\r\n            var descuentoCliente by remember { mutableStateOf(datosCliente.getString(\"descuento\")) }\r\n            var montoContrato by remember { mutableStateOf(datosCliente.getString(\"MontoContrato\")) }\r\n            var detalleContrato by remember { mutableStateOf(datosCliente.getString(\"DetalleContrato\")) }\r\n\r\n            // Informacion de ventas\r\n            var ultimaVenta by remember { mutableStateOf(datosCliente.getString(\"ultimaventa\")) }\r\n            var agenteVentas by remember { mutableStateOf(datosCliente.getString(\"agenteventas\")) }\r\n            var tipoPrecio by remember { mutableStateOf(datosCliente.getString(\"tipoprecio\")) }\r\n            var estadoCliente by remember { mutableStateOf(datosCliente.getString(\"estado\")) }\r\n            var tieneCredito by remember { mutableStateOf(datosCliente.getString(\"tienecredito\")) }\r\n            var noForzarCredito by remember { mutableStateOf(datosCliente.getString(\"noforzarcredito\")) }\r\n            var exento by remember { mutableStateOf(datosCliente.getString(\"exento\")) }\r\n            var exonerado by remember { mutableStateOf(datosCliente.getString(\"exonerado\")) }\r\n            var zonaCliente by remember { mutableStateOf( datosCliente.getString(\"zona\")) }\r\n\r\n            // Datos iniciales Cliente\r\n            val clienteActual = Cliente(\r\n                Id_cliente = codigoCliente,\r\n                Nombre = datosCliente.getString(\"nombrejuridico\"),\r\n                Telefonos = datosCliente.getString(\"telefonos\"),\r\n                Direccion = datosCliente.getString(\"direccion\"),\r\n                TipoPrecioVenta = datosCliente.getString(\"tipoprecio\"),\r\n                Cod_Tipo_Cliente = datosCliente.getString(\"clientetipo\"),\r\n                Email = datosCliente.getString(\"emailgeneral\"),\r\n                DiaCobro = datosCliente.getString(\"diacobro\"),\r\n                Contacto = datosCliente.getString(\"contacto\"),\r\n                Exento = datosCliente.getString(\"exento\"),\r\n                AgenteVentas = datosCliente.getString(\"agenteventas\"),\r\n                Cod_Zona = datosCliente.getString(\"zona\"),\r\n                DetalleContrato = datosCliente.getString(\"DetalleContrato\"),\r\n                MontoContrato = datosCliente.getString(\"MontoContrato\"),\r\n                Descuento = datosCliente.getString(\"descuento\"),\r\n                MontoCredito = datosCliente.getString(\"creditomonto\"),\r\n                plazo = datosCliente.getString(\"creditoplazo\"),\r\n                TieneCredito = datosCliente.getString(\"tienecredito\"),\r\n                FechaNacimiento = datosCliente.getString(\"FechaNacimiento\"),\r\n                Cod_Moneda = datosCliente.getString(\"moneda\"),\r\n                TipoIdentificacion = datosCliente.getString(\"cedulatipo\"),\r\n                ClienteNombreComercial = datosCliente.getString(\"nombrecomercial\"),\r\n                EmailFactura = datosCliente.getString(\"emailfactura\"),\r\n                EmailCobro = datosCliente.getString(\"emailcobros\"),\r\n                estado = datosCliente.getString(\"estado\"),\r\n                exonerado = datosCliente.getString(\"exonerado\"),\r\n                cedulaCliente = datosCliente.getString(\"cedula\"),\r\n                ultimaVenta = datosCliente.getString(\"ultimaventa\"),\r\n                noForzaCredito = datosCliente.getString(\"noforzarcredito\"),\r\n                opcionesLogicasCliente = opcionesLogicasCliente,\r\n                opcionesEstadoCliente = opcionesEstadoCliente,\r\n                opcionesTipoCliente = opcionesTipoCliente,\r\n                opcionesAgentesVentas = opcionesAgentesVentasClienteActivos,\r\n                opcionesTipoIndetificacionCliente = opcionesTipoIndentificacionCliente\r\n\r\n            )\r\n\r\n            LaunchedEffect(guardarEdicionCliente) {\r\n                if(guardarEdicionCliente){\r\n                    estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)\r\n                    val clienteModificado = Cliente(\r\n                        Id_cliente = codigoCliente,\r\n                        Nombre = nombreJuridico,\r\n                        Telefonos = telefono,\r\n                        Direccion = direccion,\r\n                        TipoPrecioVenta = tipoPrecio,\r\n                        Cod_Tipo_Cliente = codigoTipoClienteSeleccionado,\r\n                        Email = emailGeneral,\r\n                        DiaCobro = diaCobro,\r\n                        Contacto = contacto,\r\n                        Exento = opcionExentoSeleccionada,\r\n                        AgenteVentas = agenteVentas,\r\n                        Cod_Zona = zonaCliente,\r\n                        DetalleContrato = detalleContrato,\r\n                        MontoContrato = montoContrato,\r\n                        Descuento = descuentoCliente,\r\n                        MontoCredito = creditoMonto,\r\n                        plazo =creditoPlazo,\r\n                        TieneCredito = opciontieneCreditoSeleccionada,\r\n                        FechaNacimiento = fechaNacimiento,\r\n                        Cod_Moneda = monedaCliente,\r\n                        TipoIdentificacion = codigoTipoIdentificacionClienteSeleccionada,\r\n                        ClienteNombreComercial = nombreComercial,\r\n                        EmailFactura = emailFactura,\r\n                        EmailCobro = emailCobros,\r\n                    )\r\n\r\n                    val result= objectoProcesadorDatosApi.actualizarDatosClientes(\r\n                        clienteActual = clienteActual,\r\n                        clienteModificado = clienteModificado\r\n                    )\r\n                    //validar si la respuesta de la api fue exitosa\r\n                    if (result==null){\r\n                        if (!snackbarVisible) {\r\n                            errorResultadoApi=true\r\n                            coroutineScope.launch {\r\n                                snackbarVisible=true\r\n                                snackbarHostState.showSnackbar(\r\n                                    message = \"Error: revise su conexión a Internet\"\r\n                                )\r\n                                snackbarHostState.currentSnackbarData?.dismiss()\r\n                                snackbarVisible=false\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    else if (result.getInt(\"code\")==921){\r\n                        println(\"hola\")\r\n                    }\r\n\r\n                    else if (result.getString(\"status\")==\"error\"){\r\n                        if (!snackbarVisible) {\r\n                            errorResultadoApi=true\r\n                            coroutineScope.launch {\r\n                                snackbarVisible=true\r\n                                snackbarHostState.showSnackbar(\r\n                                    message = \"Error: ${result.getString(\"data\")}\"\r\n                                )\r\n                                snackbarHostState.currentSnackbarData?.dismiss()\r\n                                snackbarVisible=false\r\n                            }\r\n                        }\r\n                    }\r\n                    else if(result.getString(\"status\")==\"ok\" && result.getString(\"code\")==\"200\"){\r\n//                        estadoPantallaCarga.cambiarEstadoRespuestaApi(true)\r\n                    }\r\n\r\n                    estadoPantallaCarga.cambiarEstadoMenuPrincipal(false)\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n            //Box contenedor Lazy Column\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(objetoAdaptardor.ajustarAlturaCompact(652))\r\n                    .background(Color.White)\r\n                    .constrainAs(bxContenedorLzColum){\r\n                        start.linkTo(parent.start)\r\n                        top.linkTo(bxSuperior.bottom)\r\n                    },\r\n                contentAlignment = Alignment.TopCenter\r\n            ){\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(objetoAdaptardor.ajustarAlturaCompact(12)),\r\n                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                    state = lazyState\r\n                ) {\r\n                    item { Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(4))) }\r\n                    item {\r\n                        Column {\r\n\r\n                            AgregarContenedorDatosClientes(\r\n                                objetoAdaptardor = objetoAdaptardor,\r\n                                titulo = \"Datos del cliente\",\r\n                                fontAksharPrincipal = fontAksharPrincipal,\r\n                                icono = Icons.Filled.AccountCircle,\r\n                                isPrimero = true,\r\n                                valor = modoEdicionActivado,\r\n                                nuevoValor = { nuevoEstado-> modoEdicionActivado= nuevoEstado},\r\n                            ) {\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Nombre comercial\",\r\n                                    valor = nombreComercial,\r\n                                    nuevoValor = {nombreComercial= it},\r\n                                    modoEdicionActivado = modoEdicionActivado\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Nombre jurídico\",\r\n                                    valor = nombreJuridico,\r\n                                    nuevoValor = {nombreJuridico= it},\r\n                                    modoEdicionActivado = modoEdicionActivado\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Tipo cédula\",\r\n                                    valor = opcionesTipoIndentificacionCliente[tipoCedula]?: \"Sin definir\",\r\n                                    nuevoValor = {\r\n                                        tipoCedula= it\r\n                                        codigoTipoIdentificacionClienteSeleccionada=it\r\n                                    },\r\n                                    modoEdicionActivado = false\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Cédula\",\r\n                                    valor = cedulaCliente,\r\n                                    nuevoValor = {cedulaCliente= it},\r\n                                    modoEdicionActivado = false\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Fecha nacimiento\",\r\n                                    valor = fechaNacimiento,\r\n                                    nuevoValor = {fechaNacimiento= it},\r\n                                    isUltimo = true,\r\n                                    contieneOpciones = true,\r\n                                    isSeleccionarFecha = true,\r\n                                    modoEdicionActivado = modoEdicionActivado\r\n                                )\r\n                            }\r\n\r\n                            Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                            AgregarContenedorDatosClientes(\r\n                                objetoAdaptardor = objetoAdaptardor,\r\n                                fontAksharPrincipal = fontAksharPrincipal,\r\n                                titulo = \"Información de contacto\",\r\n                                icono = Icons.Filled.Phone\r\n                            ){\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Teléfonos\",\r\n                                    valor = telefono,\r\n                                    nuevoValor = {telefono= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    soloPermitirVoloresNumericos = true,\r\n                                    permitirComas = true,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Email general\",\r\n                                    valor = emailGeneral,\r\n                                    nuevoValor = {emailGeneral= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Email factura\",\r\n                                    valor = emailFactura,\r\n                                    nuevoValor = {emailFactura= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Email cobros\",\r\n                                    valor = emailCobros,\r\n                                    nuevoValor = {emailCobros= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Contacto\",\r\n                                    valor = contacto,\r\n                                    nuevoValor = {contacto= it},\r\n                                    modoEdicionActivado = modoEdicionActivado\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Dirección\",\r\n                                    valor = direccion,\r\n                                    nuevoValor = {direccion= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    isUltimo = true\r\n                                )\r\n                            }\r\n\r\n                            Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                            AgregarContenedorDatosClientes(\r\n                                objetoAdaptardor = objetoAdaptardor,\r\n                                fontAksharPrincipal = fontAksharPrincipal,\r\n                                titulo = \"Información financiera\",\r\n                                icono = Icons.Filled.MonetizationOn\r\n                            ){\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Monto de crédito\",\r\n                                    valor = creditoMonto,\r\n                                    nuevoValor = {creditoMonto= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    darFormatoMiles = true,\r\n                                    soloPermitirVoloresNumericos = true,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Plazo de crédito\",\r\n                                    valor = creditoPlazo,\r\n                                    nuevoValor = {telefono= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    soloPermitirVoloresNumericos = true,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Día de cobro\",\r\n                                    valor = diaCobro,\r\n                                    nuevoValor = {diaCobro= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    soloPermitirVoloresNumericos = true,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Tipo de cliente\",\r\n                                    valor = opcionesTipoCliente[clienteTipo]?:\"Sin definir\",\r\n                                    nuevoValor = {\r\n                                        clienteTipo= it\r\n                                        codigoTipoClienteSeleccionado=it\r\n                                    },\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    contieneOpciones = true,\r\n                                    opciones = opcionesTipoCliente\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Moneda\",\r\n                                    valor = monedaCliente,\r\n                                    nuevoValor = {monedaCliente= it},\r\n                                    modoEdicionActivado = modoEdicionActivado\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Descuento\",\r\n                                    valor = descuentoCliente,\r\n                                    nuevoValor = {descuentoCliente= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    soloPermitirVoloresNumericos = true,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Monto de contrato\",\r\n                                    valor = montoContrato,\r\n                                    nuevoValor = {montoContrato= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    darFormatoMiles = true,\r\n                                    soloPermitirVoloresNumericos = true,\r\n                                    cantidadLineas = 1\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Detalle de contrato\",\r\n                                    valor = detalleContrato,\r\n                                    nuevoValor = {detalleContrato= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    isUltimo = true\r\n                                )\r\n                            }\r\n\r\n                            Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                            AgregarContenedorDatosClientes(\r\n                                objetoAdaptardor = objetoAdaptardor,\r\n                                fontAksharPrincipal = fontAksharPrincipal,\r\n                                titulo = \"Información de ventas\",\r\n                                icono = Icons.Default.Assessment\r\n                            ){\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Ultima venta\",\r\n                                    valor = ultimaVenta,\r\n                                    nuevoValor = {ultimaVenta= it},\r\n                                    modoEdicionActivado = false\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Agente de ventas\",\r\n                                    valor = opcionesAgentesVentasClienteActivos[agenteVentas]?:\"Sin definir\",\r\n                                    nuevoValor = {\r\n                                        agenteVentas= it\r\n                                        codigoAgenteVentasSeleccionado=it\r\n                                    },\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    contieneOpciones = true,\r\n                                    opciones = opcionesAgentesVentasClienteActivos\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Tipo de precio\",\r\n                                    valor = opcionesTipoPrecioCliente[tipoPrecio]?:\"Sin definir\",\r\n                                    nuevoValor = {tipoPrecio= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    contieneOpciones = true,\r\n                                    opciones = opcionesTipoPrecioCliente\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Estado\",\r\n                                    valor = opcionesEstadoCliente[estadoCliente]?: \"Sin definir\",\r\n                                    nuevoValor = {estadoCliente= it},\r\n                                    modoEdicionActivado = false\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Tiene crédito\",\r\n                                    valor = opcionesLogicasCliente[tieneCredito]?:\"Sin definir\",\r\n                                    nuevoValor = {\r\n                                        tieneCredito= it\r\n                                        opciontieneCreditoSeleccionada=it\r\n                                    },\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    contieneOpciones = true,\r\n                                    opciones = opcionesLogicasCliente\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Forzar crédito\",\r\n                                    valor = opcionesLogicasCliente[noForzarCredito]?:\"Sin definir\",\r\n                                    nuevoValor = {noForzarCredito= it},\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    contieneOpciones = true,\r\n                                    opciones = opcionesLogicasCliente\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Exento\",\r\n                                    valor = opcionesLogicasCliente[exento]?:\"Sin definir\",\r\n                                    nuevoValor = {\r\n                                        exento= it\r\n                                        opcionExentoSeleccionada=it\r\n                                    },\r\n                                    modoEdicionActivado = modoEdicionActivado,\r\n                                    contieneOpciones = true,\r\n                                    opciones = opcionesLogicasCliente\r\n                                )\r\n                                AgregarTextFieldDatosClientes(\r\n                                    label = \"Exonerado\",\r\n                                    valor = opcionesLogicasCliente[exonerado]?:\"Sin definir\",\r\n                                    nuevoValor = {exonerado= it},\r\n                                    modoEdicionActivado = false,\r\n                                    isUltimo = true,\r\n                                )\r\n                            }\r\n\r\n                            Spacer(modifier = Modifier.height(objetoAdaptardor.ajustarAlturaCompact(22)))\r\n\r\n                            if (modoEdicionActivado){\r\n                                //Box Contenerdor boton guardar\r\n                                Box(\r\n                                    modifier = Modifier\r\n                                        .width(objetoAdaptardor.ajustarAnchoCompact(360))\r\n                                        .background(Color.Transparent)\r\n                                        .height(objetoAdaptardor.ajustarAlturaCompact(50)),\r\n                                    contentAlignment = Alignment.Center\r\n                                ){\r\n                                    Button(modifier = Modifier\r\n                                        .height(objetoAdaptardor.ajustarAlturaCompact(45)),\r\n                                        onClick = {\r\n                                            guardarEdicionCliente=true\r\n                                        },\r\n                                        colors = ButtonDefaults.buttonColors(\r\n                                            containerColor = Color.Transparent, // Color de fondo del botón\r\n                                            contentColor = Color(0xFF244BC0)\r\n                                        )\r\n                                    ){\r\n                                        Row {\r\n                                            Text(\r\n                                                text = \"Guardar\",\r\n                                                maxLines = 1,\r\n                                                fontFamily = fontAksharPrincipal,\r\n                                                fontWeight = FontWeight.SemiBold,\r\n                                                fontSize = objetoAdaptardor.ajustarFont(25)\r\n                                            )\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                            else{\r\n                                // Información General\r\n                                tipoCedula = datosCliente.getString(\"cedulatipo\")\r\n                                cedulaCliente = datosCliente.getString(\"cedula\")\r\n                                nombreJuridico = datosCliente.getString(\"nombrejuridico\")\r\n                                nombreComercial = datosCliente.getString(\"nombrecomercial\")\r\n                                fechaNacimiento = datosCliente.getString(\"FechaNacimiento\")\r\n\r\n                                // Información de Contacto\r\n                                direccion = datosCliente.getString(\"direccion\")\r\n                                telefono = datosCliente.getString(\"telefonos\")\r\n                                emailGeneral = datosCliente.getString(\"emailgeneral\")\r\n                                emailFactura = datosCliente.getString(\"emailfactura\")\r\n                                emailCobros = datosCliente.getString(\"emailcobros\")\r\n                                contacto = datosCliente.getString(\"contacto\")\r\n\r\n                                // Información Financiera\r\n                                creditoMonto = datosCliente.getString(\"creditomonto\")\r\n                                creditoPlazo = datosCliente.getString(\"creditoplazo\")\r\n                                diaCobro = datosCliente.getString(\"diacobro\")\r\n                                clienteTipo = datosCliente.getString(\"clientetipo\")\r\n                                monedaCliente = datosCliente.getString(\"moneda\")\r\n                                descuentoCliente = datosCliente.getString(\"descuento\")\r\n                                montoContrato = datosCliente.getString(\"MontoContrato\")\r\n                                detalleContrato = datosCliente.getString(\"DetalleContrato\")\r\n\r\n                                // Información de Ventas\r\n                                ultimaVenta = datosCliente.getString(\"ultimaventa\")\r\n                                agenteVentas = datosCliente.getString(\"agenteventas\")\r\n                                tipoPrecio = datosCliente.getString(\"tipoprecio\")\r\n                                estadoCliente = datosCliente.getString(\"estado\")\r\n                                tieneCredito = datosCliente.getString(\"tienecredito\")\r\n                                noForzarCredito = datosCliente.getString(\"noforzarcredito\")\r\n                                exento = datosCliente.getString(\"exento\")\r\n                                exonerado = datosCliente.getString(\"exonerado\")\r\n                                zonaCliente = datosCliente.getString(\"zona\")\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        // Snackbar inferior para mostrar mensajes emergentes para el usuario como:\r\n        // - Problemas de Red\r\n        // - Contraseñas Incorrectas\r\n        // - Correos incorrectos o no encontrados\r\n        SnackbarHost(\r\n            hostState = snackbarHostState,\r\n            snackbar = { snackbarData ->\r\n                Snackbar(\r\n                    containerColor = Color.White, // Color de fondo del Snackbar\r\n                    contentColor = Color.DarkGray // Color del texto del Snackbar\r\n\r\n                ) {\r\n                    Row(\r\n                        modifier = Modifier.padding(objetoAdaptardor.ajustarAlturaCompact(8)),// Añadir algo de padding para espaciado\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = iconoSnht,\r\n                            contentDescription = \"Icono de error\",\r\n                            tint = colorIconoSnht, // Cambiar el color del ícono si deseas\r\n                            modifier = Modifier.padding(end = objetoAdaptardor.ajustarAnchoCompact(8)).size(objetoAdaptardor.ajustarAlturaCompact(35)) // Espacio entre ícono y texto\r\n                        )\r\n                        Text(\r\n                            text = snackbarData.visuals.message,\r\n                            style = TextStyle(\r\n                                color = Color.Black,\r\n                                fontSize = objetoAdaptardor.ajustarFont(15),\r\n                                fontWeight = FontWeight.Light,\r\n                                fontFamily = fontAksharPrincipal\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .constrainAs(snhtMensajesSuperiores) {\r\n                    top.linkTo(bxSuperior.bottom, margin = objetoAdaptardor.ajustarAlturaCompact(12))\r\n                    start.linkTo(parent.start)\r\n                }\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun AgregarTextFieldDatosClientes(\r\n    label: String,\r\n    valor: String,\r\n    nuevoValor: (String)-> Unit,\r\n    isUltimo: Boolean? = false,\r\n    modoEdicionActivado: Boolean= true,\r\n    contieneOpciones: Boolean = false,\r\n    opciones: SnapshotStateMap<String, String> = mutableStateMapOf(\"1\" to \"1\"),\r\n    isSeleccionarFecha: Boolean = false,\r\n    darFormatoMiles: Boolean = false,\r\n    soloPermitirVoloresNumericos: Boolean = false,\r\n    permitirComas: Boolean = false,\r\n    cantidadLineas: Int = 20\r\n){\r\n    val fontAksharPrincipal = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    var expanded by remember { mutableStateOf(false) }\r\n    val iconoDdmOpcionesFlechasLaterales = if (expanded) Icons.Filled.KeyboardArrowUp else Icons.Filled.KeyboardArrowDown\r\n    val scrollState= rememberScrollState(0)\r\n    val solicitadorFoco = remember { FocusRequester() }\r\n    var tieneFoco by remember { mutableStateOf(false) }\r\n    // Estados para manejar la fecha seleccionada\r\n\r\n    // Fecha actual para inicializar el DatePicker\r\n    val contexto = LocalContext.current\r\n    val calendario = Calendar.getInstance()\r\n    val anioActual = calendario.get(Calendar.YEAR)\r\n    val mesActual = calendario.get(Calendar.MONTH)\r\n    val diaActual = calendario.get(Calendar.DAY_OF_MONTH)\r\n\r\n    val onFechaSeleccionada: (Int, Int, Int) -> Unit = { anio, mes, dia ->\r\n        // Obtenemos la fecha actual\r\n        val calendarioActual = Calendar.getInstance()\r\n        val fechaActual = calendarioActual.timeInMillis\r\n\r\n        // Creamos una instancia de Calendar para la fecha seleccionada\r\n        val calendarioSeleccionado = Calendar.getInstance().apply {\r\n            set(anio, mes, dia, 0, 0, 0)  // Establecemos el año, mes y día seleccionados\r\n            set(Calendar.MILLISECOND, 0)\r\n        }\r\n        val fechaSeleccionada = calendarioSeleccionado.timeInMillis\r\n\r\n        // Validamos que la fecha seleccionada no sea mayor a la fecha actual\r\n        if (fechaSeleccionada > fechaActual) {\r\n            println(\"La fecha seleccionada no puede ser mayor a la fecha actual.\")\r\n        } else {\r\n            val fechaFormateada = String.format(\r\n                Locale.ROOT,\r\n                \"%04d-%02d-%02d 00:00:00.000\",\r\n                anio, mes + 1, dia\r\n            )\r\n            nuevoValor(fechaFormateada)\r\n            expanded = false\r\n        }\r\n    }\r\n\r\n    Column(\r\n        modifier = Modifier.background(Color.White),\r\n    ) {\r\n        TextField(\r\n            enabled = if (contieneOpciones) false else modoEdicionActivado,\r\n            value = if (darFormatoMiles) {\r\n                if (tieneFoco) {\r\n                    valor // Mostrar el valor sin formato mientras el campo tiene el foco\r\n                } else {\r\n                    try {\r\n                        if (valor.isNotEmpty()) {\r\n                            String.format(Locale.US, \"%,.2f\", valor.replace(\",\", \"\").toDouble())\r\n                        } else \"\"\r\n                    } catch (e: NumberFormatException) {\r\n                        valor // En caso de error, mostrar el valor tal como está\r\n                    }\r\n                }\r\n            }else valor,\r\n            onValueChange =  {\r\n                if (soloPermitirVoloresNumericos && !permitirComas){\r\n                    // Permitir solo caracteres numéricos y punto decimal\r\n                    val regex = Regex(\"^[0-9,.]*$\")\r\n                    if (it.matches(regex)) {\r\n                        nuevoValor(it.replace(\",\", \"\")) // Actualizar sin comas\r\n                    }\r\n                }else{\r\n                    nuevoValor(it)\r\n                }\r\n            },\r\n            textStyle = TextStyle(\r\n                fontFamily = fontAksharPrincipal,\r\n                fontWeight =    FontWeight.Light,\r\n                fontSize =  objetoAdaptardor.ajustarFont(18),\r\n                color = Color.Black,\r\n                textAlign = TextAlign.Start\r\n            ),\r\n            label = {\r\n                Text(\r\n                    label,\r\n                    fontFamily = fontAksharPrincipal,\r\n                    fontWeight =    FontWeight.Light,\r\n                    fontSize =  objetoAdaptardor.ajustarFont(15),\r\n                    color = Color.DarkGray,\r\n                    overflow = TextOverflow.Ellipsis,\r\n                    textAlign = TextAlign.Center,\r\n                )\r\n            },\r\n            colors = TextFieldDefaults.colors(\r\n                focusedContainerColor = Color.White,\r\n                unfocusedContainerColor = Color.White,\r\n                unfocusedIndicatorColor = if (isUltimo == true)Color.White else Color.Black,\r\n                focusedIndicatorColor = if (isUltimo == true)Color.White else Color.Black,\r\n                cursorColor = Color(0xFF244BC0),\r\n                disabledContainerColor = Color.White,\r\n                disabledIndicatorColor = if(isUltimo == true)Color.White else Color.Black\r\n\r\n            ),\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .then(\r\n                    if (contieneOpciones && modoEdicionActivado) {\r\n                        Modifier.clickable { expanded = !expanded }\r\n                    } else {\r\n                        Modifier // No aplica ningún modificador extra\r\n                    }\r\n                )\r\n                .focusRequester(solicitadorFoco)\r\n                .onFocusChanged { estadoFoco ->\r\n                    tieneFoco = estadoFoco.isFocused // Detectar el estado de foco\r\n                },\r\n            placeholder = {\r\n                Text(\r\n                    \"Sin definir\",\r\n                    fontFamily = fontAksharPrincipal,\r\n                    fontWeight =    FontWeight.Light,\r\n                    fontSize =  objetoAdaptardor.ajustarFont(18),\r\n                    color = Color.DarkGray,\r\n                    overflow = TextOverflow.Ellipsis,\r\n                    textAlign = TextAlign.Center,\r\n                )\r\n            },\r\n            trailingIcon = {\r\n                if (contieneOpciones && modoEdicionActivado && !isSeleccionarFecha){\r\n                    IconButton(onClick = {expanded = !expanded}) {\r\n                        Icon(\r\n                            imageVector = iconoDdmOpcionesFlechasLaterales,\r\n                            contentDescription = \"Icono flechas\",\r\n                            tint = Color.Black\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            keyboardOptions = if (soloPermitirVoloresNumericos) {\r\n                KeyboardOptions(keyboardType = KeyboardType.Number) // Solo permite números\r\n            } else {\r\n                KeyboardOptions.Default // Permite cualquier tipo de entrada\r\n            },\r\n            maxLines = cantidadLineas\r\n        )\r\n\r\n\r\n        if (expanded && !isSeleccionarFecha){\r\n            DropdownMenu(\r\n                expanded = expanded,\r\n                onDismissRequest = { expanded = false },\r\n                modifier = Modifier\r\n                    .background(Color.White)\r\n                    .width(objetoAdaptardor.ajustarAlturaCompact(360))\r\n                    .heightIn(max = objetoAdaptardor.ajustarAlturaCompact(200)),\r\n                scrollState = scrollState\r\n            ) {\r\n                opciones.forEach { (clave, contenido) ->\r\n                    DropdownMenuItem(\r\n                        onClick = {\r\n                            nuevoValor (clave)\r\n                            expanded = false // Cierra el menú después de seleccionar\r\n                        },\r\n                        text = {\r\n                            Text(\r\n                                contenido,\r\n                                fontFamily = fontAksharPrincipal,\r\n                                fontWeight = FontWeight.Medium,\r\n                                fontSize = objetoAdaptardor.ajustarFont(17),\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis,\r\n                                textAlign = TextAlign.Center,\r\n                                color = Color.Black\r\n                            )\r\n                        },\r\n                        modifier = Modifier.background(Color.White)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        if (expanded && isSeleccionarFecha){\r\n            DatePickerDialog(\r\n                contexto,\r\n                { _, anio, mes, dia ->\r\n                    onFechaSeleccionada(anio, mes, dia)\r\n                },\r\n                anioActual,\r\n                mesActual,\r\n                diaActual\r\n            ).show()\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\ninternal fun AgregarContenedorDatosClientes(\r\n    objetoAdaptardor: FuncionesParaAdaptarContenidoCompact,\r\n    titulo: String,\r\n    fontAksharPrincipal: FontFamily,\r\n    icono: ImageVector,\r\n    isPrimero: Boolean? = false,\r\n    valor: Boolean? = false,\r\n    nuevoValor: ((Boolean) -> Unit)? = null,\r\n    contenido: @Composable ()-> Unit\r\n){\r\n    Card(\r\n        modifier = Modifier\r\n            .width(objetoAdaptardor.ajustarAnchoCompact(360))\r\n            .shadow(\r\n                elevation = objetoAdaptardor.ajustarAlturaCompact(7),\r\n                shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(10))\r\n            ),\r\n        shape = RoundedCornerShape(objetoAdaptardor.ajustarAlturaCompact(10)),\r\n        colors = CardDefaults.cardColors(containerColor = Color.White)\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(Color.White),\r\n            contentAlignment = Alignment.TopStart\r\n        ){\r\n            Column {\r\n                TextField(\r\n                    enabled = false,\r\n                    value = \"\",\r\n                    onValueChange = {},\r\n                    textStyle = TextStyle(\r\n                        fontFamily = fontAksharPrincipal,\r\n                        fontWeight =    FontWeight.Light,\r\n                        fontSize =  objetoAdaptardor.ajustarFont(18),\r\n                        color = Color.Black,\r\n                        textAlign = TextAlign.Start\r\n                    ),\r\n                    label = {\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .height(objetoAdaptardor.ajustarAlturaCompact(30))\r\n                                .fillMaxWidth()\r\n                                .background(Color.White),\r\n                            contentAlignment = Alignment.BottomCenter\r\n                        ){\r\n                            Row(\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                                horizontalArrangement = Arrangement.Center\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = icono,\r\n                                    contentDescription = \"Icono\",\r\n                                    tint = Color.DarkGray,\r\n                                    modifier = Modifier\r\n                                        .size(objetoAdaptardor.ajustarAlturaCompact(30))\r\n                                )\r\n                                Spacer(modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(4)))\r\n                                Text(\r\n                                    titulo,\r\n                                    fontFamily = fontAksharPrincipal,\r\n                                    fontWeight =    FontWeight.Light,\r\n                                    fontSize =  objetoAdaptardor.ajustarFont(22),\r\n                                    color = Color.DarkGray,\r\n                                    maxLines = 1,\r\n                                    overflow = TextOverflow.Ellipsis,\r\n                                    textAlign = TextAlign.Start,\r\n                                    modifier = Modifier.width(if (isPrimero==true) objetoAdaptardor.ajustarAnchoCompact(170)else objetoAdaptardor.ajustarAnchoCompact(360))\r\n                                )\r\n                                if(isPrimero==true) {\r\n                                    Spacer(\r\n                                        modifier = Modifier.width(\r\n                                            objetoAdaptardor.ajustarAnchoCompact(\r\n                                                12\r\n                                            )\r\n                                        )\r\n                                    )\r\n                                    Text(\r\n                                        text = \"Editar\",\r\n                                        fontFamily = fontAksharPrincipal,\r\n                                        fontWeight = FontWeight.Light,\r\n                                        fontSize = objetoAdaptardor.ajustarFont(20),\r\n                                        color = Color.DarkGray,\r\n                                        maxLines = 1,\r\n                                        overflow = TextOverflow.Ellipsis,\r\n                                        textAlign = TextAlign.Center,\r\n                                        modifier = Modifier\r\n                                            .height(objetoAdaptardor.ajustarAlturaCompact(25))\r\n                                            .width(objetoAdaptardor.ajustarAnchoCompact(47))\r\n                                    )\r\n                                    Spacer(\r\n                                        modifier = Modifier.width(\r\n                                            objetoAdaptardor.ajustarAnchoCompact(\r\n                                                5\r\n                                            )\r\n                                        )\r\n                                    )\r\n\r\n                                    Switch(\r\n                                        checked = valor ?: false,\r\n                                        onCheckedChange = { nuevoEstado ->\r\n                                            nuevoValor?.invoke(nuevoEstado)\r\n                                        },\r\n                                        colors = SwitchDefaults.colors(\r\n                                            checkedThumbColor = Color(0xFF244BC0),\r\n                                            uncheckedThumbColor = Color.LightGray,\r\n                                            checkedTrackColor = Color.White,\r\n                                            uncheckedTrackColor = Color.White,\r\n                                            uncheckedBorderColor = Color.LightGray,\r\n                                            checkedBorderColor = Color.LightGray\r\n                                        )\r\n                                    )\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                    },\r\n                    colors = TextFieldDefaults.colors(\r\n                        focusedContainerColor = Color.White,\r\n                        unfocusedContainerColor = Color.White,\r\n                        unfocusedIndicatorColor = Color.Black,\r\n                        focusedIndicatorColor = Color.Black,\r\n                        cursorColor = Color(0xFF244BC0),\r\n                        disabledContainerColor = Color.White,\r\n                        disabledIndicatorColor = Color.Black\r\n                    ),\r\n                    modifier = Modifier.width(objetoAdaptardor.ajustarAnchoCompact(360))\r\n                )\r\n                contenido()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Preview(){\r\n    val estadoPantallaCarga = EstadoPantallaCarga()\r\n    IniciarInterfazInformacionCliente(\r\n        codigoCliente = \"\",\r\n        token = \"\",\r\n        navControllerPantallasModuloClientes = null,\r\n        estadoPantallaCarga = estadoPantallaCarga\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazInformacionCliente.kt b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazInformacionCliente.kt
--- a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazInformacionCliente.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/modulos/clientes/InterfazInformacionCliente.kt	(date 1733437143110)
@@ -83,6 +83,7 @@
 import com.soportereal.invefacon.R
 import com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact
 import com.soportereal.invefacon.interfaces.compact.pantallas_principales.EstadoPantallaCarga
+import com.soportereal.invefacon.interfaces.compact.pantallas_principales._estadoPantallaCarga
 import kotlinx.coroutines.delay
 import kotlinx.coroutines.launch
 import org.json.JSONObject
@@ -316,7 +317,7 @@
             opciontieneCreditoSeleccionada= datosCliente.getString("tienecredito")
             opcionExentoSeleccionada= datosCliente.getString("exento")
             delay(500)
-            estadoPantallaCarga.cambiarEstadoMenuPrincipal(false)
+            _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
             isCosultaDatasFinalizada=0
         }
     }
@@ -372,7 +373,6 @@
         }
 
         if (mostrarDatosCliente){
-
             var tipoCedula by remember { mutableStateOf(datosCliente.getString("cedulatipo")) }
             var cedulaCliente by remember { mutableStateOf(datosCliente.getString("cedula")) }
             var nombreJuridico by remember { mutableStateOf(datosCliente.getString("nombrejuridico")) }
@@ -444,12 +444,11 @@
                 opcionesTipoCliente = opcionesTipoCliente,
                 opcionesAgentesVentas = opcionesAgentesVentasClienteActivos,
                 opcionesTipoIndetificacionCliente = opcionesTipoIndentificacionCliente
-
             )
 
             LaunchedEffect(guardarEdicionCliente) {
                 if(guardarEdicionCliente){
-                    estadoPantallaCarga.cambiarEstadoMenuPrincipal(true)
+                    _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(true)
                     val clienteModificado = Cliente(
                         Id_cliente = codigoCliente,
                         Nombre = nombreJuridico,
@@ -481,6 +480,7 @@
                         clienteActual = clienteActual,
                         clienteModificado = clienteModificado
                     )
+
                     //validar si la respuesta de la api fue exitosa
                     if (result==null){
                         if (!snackbarVisible) {
@@ -517,7 +517,7 @@
 //                        estadoPantallaCarga.cambiarEstadoRespuestaApi(true)
                     }
 
-                    estadoPantallaCarga.cambiarEstadoMenuPrincipal(false)
+                    _estadoPantallaCarga.cambiarEstadoPantallaPrincipal(false)
                 }
             }
 
Index: app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazMenuPrincipalCompact.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.soportereal.invefacon.interfaces.compact.pantallas_principales\r\n\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.NavigationBar\r\nimport androidx.compose.material3.NavigationBarItem\r\nimport androidx.compose.material3.NavigationBarItemDefaults\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.text.font.Font\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.google.accompanist.systemuicontroller.SystemUiController\r\nimport com.google.accompanist.systemuicontroller.rememberSystemUiController\r\nimport com.soportereal.invefacon.R\r\nimport com.soportereal.invefacon.funciones_de_interfaces.NavHostPantallasMenuPrincipal\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasMenuPrincipal.PantallaAjustes\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasMenuPrincipal.PantallaInicio\r\nimport com.soportereal.invefacon.funciones_de_interfaces.RutasPantallasMenuPrincipal.PantallaSalir\r\nimport com.soportereal.invefacon.interfaces.compact.FuncionesParaAdaptarContenidoCompact\r\n\r\n\r\n@Composable\r\nfun IniciarInterfazMenuPrincipalCompact(\r\n    token: String,\r\n    nombreEmpresa: String,\r\n    nombreUsuario: String,\r\n    navControllerPrincipal: NavController?,\r\n    systemUiController: SystemUiController,\r\n    estadoPantallaCarga: EstadoPantallaCarga\r\n) {\r\n    val aksharFont = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n    val navControllerPantallasMenuPrincipal = rememberNavController()\r\n    val isCargando by estadoPantallaCarga.isCargandoPantallasMenuPrincipal.collectAsState()\r\n    val _estadoRespuestaApi = EstadoRespuestaApi()\r\n    val estadoRespuestaApi by _estadoRespuestaApi.isRespuestaApiExitosa.collectAsState()\r\n    val mensajeEstadoRespuestaApi by _estadoRespuestaApi.mensajeEstadoRespuesta.collectAsState()\r\n\r\n    Box(modifier = Modifier\r\n        .statusBarsPadding()\r\n        .navigationBarsPadding()\r\n        .fillMaxSize(),\r\n        contentAlignment = Alignment.BottomCenter\r\n    ) {\r\n        Column {\r\n            Scaffold(\r\n                bottomBar = {\r\n                    NavegacionInferior(navControllerPantallasMenuPrincipal)\r\n                },\r\n                modifier = Modifier.padding(bottom = objetoAdaptardor.ajustarAlturaCompact(20))\r\n            ) { innerPadding ->\r\n                    NavHostPantallasMenuPrincipal(\r\n                        innerPadding = innerPadding,\r\n                        token = token,\r\n                        navControllerPrincipal = navControllerPrincipal,\r\n                        navControllerPantallasMenuPrincipal= navControllerPantallasMenuPrincipal,\r\n                        nombreEmpresa = nombreEmpresa,\r\n                        nombreUsuario = nombreUsuario,\r\n                        systemUiController= systemUiController,\r\n                        estadoPantallaCarga= estadoPantallaCarga,\r\n                        estadoRespuestaApi = _estadoRespuestaApi\r\n                    )\r\n            }\r\n        }\r\n        Box(modifier = Modifier\r\n            .fillMaxWidth()\r\n            .background(Color(0xFF000000))\r\n            .height(objetoAdaptardor.ajustarAlturaCompact(20)),\r\n            contentAlignment = Alignment.Center\r\n        ){\r\n            Text(text = \"Invefacon ©2024\",\r\n                color = Color.White,\r\n                fontFamily = aksharFont,\r\n                fontWeight = FontWeight.Light,\r\n                fontSize = objetoAdaptardor.ajustarFont(15))\r\n        }\r\n\r\n        CustomBarView(systemUiController,isCargando,estadoRespuestaApi, mensajeEstadoRespuestaApi)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun rutaActiva(navController: NavController): String?{\r\n    val rutaEntrada by navController.currentBackStackEntryAsState()\r\n    return rutaEntrada?.destination?.route\r\n}\r\n\r\n@Composable\r\nfun NavegacionInferior(navController: NavController) {\r\n    val aksharFont = FontFamily(Font(R.font.akshar_medium))\r\n    val configuration = LocalConfiguration.current\r\n    val dpAnchoPantalla = configuration.screenWidthDp\r\n    val dpAltoPantalla = configuration.screenHeightDp\r\n    val dpFontPantalla= configuration.fontScale\r\n    val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)\r\n\r\n    Column {\r\n        // Card en la parte superior que simula la sombra\r\n        Card(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(1.dp), // Ajusta la altura de la sombra\r\n            elevation = CardDefaults.cardElevation(20.dp),\r\n            colors = CardDefaults.cardColors(Color(0x7E8C8C8C))\r\n        ) {}\r\n\r\n\r\n        NavigationBar (\r\n            modifier = Modifier\r\n                .height(objetoAdaptardor.ajustarAlturaCompact(70)),\r\n            containerColor = Color.White,\r\n            tonalElevation = 100.dp\r\n        ) {\r\n            val rutaActiva = rutaActiva(navController)\r\n            NavigationBarItem(\r\n                selected = rutaActiva == PantallaInicio.ruta,\r\n                onClick = {\r\n                    navController.navigate(PantallaInicio.ruta){\r\n                        popUpTo(PantallaInicio.ruta){inclusive=true}\r\n                        launchSingleTop=true\r\n                    }\r\n                },\r\n                icon = { Icon(imageVector = PantallaInicio.icono, contentDescription = PantallaInicio.titulo, modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(28))) },\r\n                label = { Text(PantallaInicio.titulo, fontFamily = aksharFont, fontWeight = FontWeight.Light, fontSize = objetoAdaptardor.ajustarFont(15)) },\r\n                alwaysShowLabel = true,\r\n                colors =  NavigationBarItemDefaults.colors(\r\n                    selectedIconColor = Color(0xFF244BC0), // Color del ícono cuando el ítem está seleccionado\r\n                    unselectedIconColor = Color(0xFF8C8C8C), // Color del ícono cuando el ítem no está seleccionado\r\n                    selectedTextColor =Color(0xFF244BC0), // Color del texto cuando el ítem está seleccionado\r\n                    unselectedTextColor =Color(0xFF8C8C8C), // Color del texto cuando el ítem no está seleccionado\r\n                    indicatorColor = Color.White // Color del \"active indicator\"\r\n                )\r\n\r\n            )\r\n\r\n            NavigationBarItem(\r\n                selected = rutaActiva == PantallaAjustes.ruta,\r\n                onClick = {\r\n                    navController.navigate(PantallaAjustes.ruta){\r\n                        launchSingleTop=true\r\n                    }\r\n                },\r\n                icon = { Icon(imageVector = PantallaAjustes.icono, contentDescription = PantallaAjustes.titulo, modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(28))) },\r\n                label = { Text(PantallaAjustes.titulo, fontFamily = aksharFont, fontWeight = FontWeight.Light, fontSize = objetoAdaptardor.ajustarFont(15)) },\r\n                alwaysShowLabel = true,\r\n                colors =  NavigationBarItemDefaults.colors(\r\n                    selectedIconColor = Color(0xFF244BC0), // Color del ícono cuando el ítem está seleccionado\r\n                    unselectedIconColor = Color(0xFF8C8C8C), // Color del ícono cuando el ítem no está seleccionado\r\n                    selectedTextColor =Color(0xFF244BC0), // Color del texto cuando el ítem está seleccionado\r\n                    unselectedTextColor =Color(0xFF8C8C8C), // Color del texto cuando el ítem no está seleccionado\r\n                    indicatorColor = Color.White // Color del \"active indicator\"\r\n                )\r\n\r\n            )\r\n\r\n            NavigationBarItem(\r\n                selected = rutaActiva == PantallaSalir.ruta,\r\n                onClick = {\r\n                    navController.navigate(PantallaSalir.ruta){\r\n                        launchSingleTop=true\r\n                    }\r\n                },\r\n                icon = { Icon(imageVector = PantallaSalir.icono, contentDescription = PantallaSalir.titulo, modifier = Modifier.size(objetoAdaptardor.ajustarAlturaCompact(28))) },\r\n                label = { Text(PantallaSalir.titulo, fontFamily = aksharFont, fontWeight = FontWeight.Light, fontSize = objetoAdaptardor.ajustarFont(15)) },\r\n                alwaysShowLabel = true,\r\n                colors =  NavigationBarItemDefaults.colors(\r\n                    selectedIconColor = Color(0xFF244BC0), // Color del ícono cuando el ítem está seleccionado\r\n                    unselectedIconColor = Color(0xFF8C8C8C), // Color del ícono cuando el ítem no está seleccionado\r\n                    selectedTextColor =Color(0xFF244BC0), // Color del texto cuando el ítem está seleccionado\r\n                    unselectedTextColor =Color(0xFF8C8C8C), // Color del texto cuando el ítem no está seleccionado\r\n                    indicatorColor = Color.White // Color del \"active indicator\"\r\n                )\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n@Preview(showBackground = true, widthDp = 384, heightDp = 812, fontScale = 1.15F)\r\n@Composable\r\nprivate fun Preview(){\r\n    val systemUiController = rememberSystemUiController()\r\n    val estadoPantallaCarga = EstadoPantallaCarga()\r\n    IniciarInterfazMenuPrincipalCompact(\"\", \"demo\", \"YESLER LORIO\", null,systemUiController, estadoPantallaCarga)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazMenuPrincipalCompact.kt b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazMenuPrincipalCompact.kt
--- a/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazMenuPrincipalCompact.kt	(revision 5a37e589626c76015386103665eea7376c06c17a)
+++ b/app/src/main/java/com/soportereal/invefacon/interfaces/compact/pantallas_principales/InterfazMenuPrincipalCompact.kt	(date 1733437221094)
@@ -60,10 +60,9 @@
     val dpFontPantalla= configuration.fontScale
     val objetoAdaptardor= FuncionesParaAdaptarContenidoCompact(dpAltoPantalla, dpAnchoPantalla, dpFontPantalla)
     val navControllerPantallasMenuPrincipal = rememberNavController()
-    val isCargando by estadoPantallaCarga.isCargandoPantallasMenuPrincipal.collectAsState()
-    val _estadoRespuestaApi = EstadoRespuestaApi()
-    val estadoRespuestaApi by _estadoRespuestaApi.isRespuestaApiExitosa.collectAsState()
-    val mensajeEstadoRespuestaApi by _estadoRespuestaApi.mensajeEstadoRespuesta.collectAsState()
+    val _datos_estadoRespuestaApi = datosEstadoRespuestaApi()
+    val estadoRespuestaApi by _datos_estadoRespuestaApi.isRespuestaApiExitosa.collectAsState()
+    val mensajeEstadoRespuestaApi by _datos_estadoRespuestaApi.mensajeEstadoRespuesta.collectAsState()
 
     Box(modifier = Modifier
         .statusBarsPadding()
@@ -87,7 +86,7 @@
                         nombreUsuario = nombreUsuario,
                         systemUiController= systemUiController,
                         estadoPantallaCarga= estadoPantallaCarga,
-                        estadoRespuestaApi = _estadoRespuestaApi
+                        datosEstadoRespuestaApi = _datos_estadoRespuestaApi
                     )
             }
         }
@@ -104,7 +103,7 @@
                 fontSize = objetoAdaptardor.ajustarFont(15))
         }
 
-        CustomBarView(systemUiController,isCargando,estadoRespuestaApi, mensajeEstadoRespuestaApi)
+//        CustomBarView(systemUiController,isCargando,estadoRespuestaApi, mensajeEstadoRespuestaApi)
     }
 }
 
